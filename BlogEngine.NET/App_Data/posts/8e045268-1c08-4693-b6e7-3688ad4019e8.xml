<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>caner</author>
  <title>Generic Repository Pattern</title>
  <description>http://blog.falafel.com/implement-step-step-generic-repository-pattern-c/
http://www.codecompiled.co</description>
  <content>&lt;p&gt;&amp;Ccedil;oğu yazılım uygulamasının belli mimari kurallar &amp;ccedil;er&amp;ccedil;evisinde farklı katmanlara ayrılarak geliştirilmesi beklenir&amp;nbsp;ve buna&amp;nbsp;n-tier architecture denir. N-tier architecture&amp;nbsp;presentation tier, middle tier yada&amp;nbsp;data tier gibi &amp;ccedil;eşitli katmanlardan oluşabilir. Presentation katmanında uygulamanızın UI tarafını ilgilendiren aray&amp;uuml;zler bulunur, Middle katmanda business logic'i ilgilendiren geliştirmeler yapılır&amp;nbsp;ve aynı zamanda database ile etkileşimde bu katmanda bulunur. Data katmanı ise uygulamanızdaki SQL Server, Oracle gibi database context'lerini i&amp;ccedil;eren katmandır. Bu katman belkide uygulamadaki en &amp;ouml;nemli katmandır sebebi ise database. Data bizim i&amp;ccedil;in en &amp;ouml;nemli şey ve database'ler ile olan veri alış verişi işin en g&amp;uuml;venlikli ve generic olması gereken yerlerin başında gelir.&lt;/p&gt;
&lt;p&gt;&lt;img style="display: block; margin-left: auto; margin-right: auto;" src="/image.axd?picture=/2016/07/repository_design _pattern.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Database varsa CRUD işlemi&amp;nbsp;(Create, Read, Update, Delete) heralde olmazsa olmazdır ve data katmanı ile doğrudan business logic'in bulunduğu middle katman haberleşsin istenilmez zira uygulamanızın b&amp;uuml;y&amp;uuml;kl&amp;uuml;ğne g&amp;ouml;re &amp;ccedil;eşitli sorunlarda &amp;ccedil;ıkartabilir. Repository pattern&amp;nbsp;bu ihtiyacı karşılayan pattern olarak karşımıza &amp;ccedil;ıkıyor ve temelde yaptığı iş&amp;nbsp;ise business logic ile data access arasında arabulucu g&amp;ouml;revi g&amp;ouml;rme.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style="text-decoration: underline;"&gt;Repository Pattern Faydaları&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Maintainability arttırır,&lt;/li&gt;
&lt;li&gt;Unit-test yapabilmemizi kolaylaştırır,&lt;/li&gt;
&lt;li&gt;Esnek bir mimari uygulamamızı sağlar,&lt;/li&gt;
&lt;li&gt;Yeni gelecek mod&amp;uuml;ller veya istenilen değişiklikleri kolayca entegre edebilmeyi sağlar,&lt;/li&gt;
&lt;li&gt;Domain driven development'ın &amp;ouml;n&amp;uuml;n&amp;uuml; a&amp;ccedil;ar.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Şimdi &amp;ouml;rnek bir proje &amp;uuml;zerinden Repository Pattern nasıl uygulanır g&amp;ouml;relim. Projeyi geliştirirken EntityFramework kurulu ve SampleDbContext adında bir database context'inizin olduğunu varsayarak ilerliyor olacağız.&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;1.Adım&lt;/strong&gt;&lt;/span&gt; - IRepository adında CRUD işlemlerini i&amp;ccedil;eren Generic bir interface tanımlama.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;public interface IRepository&amp;lt;T&amp;gt;  where T : class
    {
        IEnumerable&amp;lt;t&amp;gt; SelectAll();
        T SelectByID(object id);
        void Insert(T obj);
        void Update(T obj);
        void Delete(object id);
        void Save();
    }&lt;/pre&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;2.Adım&lt;/strong&gt;&lt;/span&gt; -&amp;nbsp;BaseRepository adında Generic IRepository interface'inden implement olan class'ı oluşturma.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;public abstract class BaseRepository&amp;lt;T&amp;gt; : IRepository&amp;lt;T&amp;gt; where T : class
    {
        private SampleDbContext db = null;
        private DbSet&amp;lt;t&amp;gt; table = null;
        public BaseRepository()
        {
            this.db = new SampleDbContext();
            table = db.Set&amp;lt;T&amp;gt;();
        }
        public BaseRepository(SampleDbContext db)
        {
            this.db = db;
            table = db.Set&amp;lt;T&amp;gt;();
        }
        public IEnumerable&amp;lt;T&amp;gt; SelectAll()
        {
            return table.ToList();
        }
        public T SelectByID(object id)
        {
            return table.Find(id);
        }
        public void Insert(T obj)
        {
            table.Add(obj);
        }
        public void Update(T obj)
        {
            table.Attach(obj);
            db.Entry(obj).State = EntityState.Modified;
        }
        public void Delete(object id)
        {
            T existing = table.Find(id);
            table.Remove(existing);
        }
        public void Save()
        {
            db.SaveChanges();
        }
    }&lt;/pre&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;3.Adım&lt;/strong&gt;&lt;/span&gt; - Employee adında &amp;ouml;rnek bir Entity tanımlama&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;public class Employee
{
    public int ID { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
}&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;4.Adım&lt;/strong&gt;&lt;/span&gt; - BaseRepository den inherit olan &lt;strong&gt;EmployeeRepository&lt;/strong&gt; class'ını&amp;nbsp;tanımlama&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;  public class EmployeeRepository : BaseRepository&amp;lt;Employee&amp;gt;
    {

    }&lt;/pre&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;5.Adım&lt;/strong&gt;&lt;/span&gt; - Yazmış olduğumuz &lt;strong&gt;EmployeeRepository&lt;/strong&gt;'yi kullanmak&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;  void Main(string[] args)
        {
            var empRepository = new EmmployeeRepository();
            empRepository.SelectAll();
        }&lt;/pre&gt;
&lt;p&gt;Projemiz hazır. Bundan sonra tanımlayacağınız entity'ler i&amp;ccedil;in &lt;strong&gt;EmployeeRepository&lt;/strong&gt; de olduğu gibi Generic olarak yazmış olduğumuz&amp;nbsp;&lt;strong&gt;BaseRepository&lt;/strong&gt;'den t&amp;uuml;reyen Repository'ler tanımlayarak projeyi geliştirmeye devam edebiliriz.&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;Not :&lt;/span&gt; Bir rivayete g&amp;ouml;re Repository Design Pattern ailesi i&amp;ccedil;erisinde en &amp;ccedil;ok kullanılan design pattern olduğu s&amp;ouml;ylenir.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</content>
  <ispublished>False</ispublished>
  <isdeleted>True</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2016-08-14 21:06:00</pubDate>
  <lastModified>2016-07-11 14:33:48</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>Generic-Repository-Pattern</slug>
  <tags />
  <comments />
  <categories />
  <notifications />
</post>