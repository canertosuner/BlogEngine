<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>caner</author>
  <title>Unit of Work Interceptor, Castle Windsor, NHibernate ve Generic Repository</title>
  <description>Unit of Work Pattern Nedir</description>
  <content>&lt;p&gt;Unit of Work Pattern Martin Fowler'ın 2002 yılında yazdığı&amp;nbsp;&lt;strong&gt;Patterns of Enterprise Application Architecture &lt;/strong&gt;kısaca &lt;strong&gt;&lt;a href="https://martinfowler.com/eaaCatalog/unitOfWork.html"&gt;PoEAA&amp;nbsp;&lt;/a&gt;&lt;/strong&gt;olarak da adlandırılan kitabında bahsetmesiyle&amp;nbsp;hayatımıza girmiş bir pattern dır.&lt;/p&gt;
&lt;p&gt;M.Fowler kitabında UoW'&amp;uuml; şu şekilde tanımlar,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Maintains a list of objects affected by a business transaction and coordinates the writing out of changes and the resolution of concurrency problems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Unit of Work; database'de execute etmemiz gereken bir dizi işlemin&amp;nbsp;yani birden fazla transaction'a ihtiya&amp;ccedil; duyarak yapacağımız işlemler (Create, Update, &amp;nbsp;Insert, Delete, Read) dizinini success veya fail olması durumunda tek bir unit yani tek bir birim olarak ele alıp y&amp;ouml;netilmesini sağlayan pattern dir.&lt;/p&gt;
&lt;p&gt;Diğer bir değişle;&amp;nbsp;ardı ardına &amp;ccedil;alışması gereken 2 sql transaction var ve bunlardan biri insert diğeride update yapsın. İlk olarak insert yaptınız ve hemen sonrasında update sorgusunu &amp;ccedil;alıştırdınız fakat update işlemi bir sorun oluştu ve fail oldu. Unit of work tam da bu sırada araya girerek bu iki işlemi bir birimlik bir işlem olarak ele alır ve normal şartlarda ikisininde success olması durumunda commit edeceği sessino'ı update işlemi fail verdiğinden ilk işlem olan insert'&amp;uuml; rollback yapar ve db de yanlış veya eksik kayıt oluşmasını engeller. Yada ikiside success olduğunda session'ı commit ederek&amp;nbsp;consistency'i sağlar.&lt;/p&gt;
&lt;p&gt;&amp;Ouml;rnek &amp;uuml;zerinden ilerleyecek olursak; bir data-access katmanımız olsun ve ORM olarak da NHibernate'i kullanıyor olalım. Projemizde IoC container olarak da Castle Windsor'ı entegre edelim.&amp;nbsp;İlk olarak Vs'da "UoW_Sample" adında bir&amp;nbsp;Empty Asp.Net Web Api projesi oluşturalım ve sonrasında nugetten Sırasıyla &lt;strong&gt;&lt;a href="https://www.nuget.org/packages/FluentNHibernate/2.0.3"&gt;Fluent-NHibernate&lt;/a&gt; &lt;/strong&gt;ve &lt;strong&gt;&lt;a href="https://www.nuget.org/packages/Castle.Windsor/4.0.0"&gt;Castle Windsor&lt;/a&gt;&lt;/strong&gt;'ı y&amp;uuml;kleyelim.&lt;/p&gt;
&lt;p&gt;Case'imiz şu şekilde olsun; User ve Address adında tablolarımız var ve AddNewUser adında bir endpoint'ten hem kullanıcı hemde address bilgileri i&amp;ccedil;eren bir model alarak sırasıyla User'ı ve Address'i insert etmeye &amp;ccedil;alışalım. User'ı insert ettikten sonra Address insert sırasında bir sorun oluşsun ve UoW araya girerek&amp;nbsp;kaydedilecek olan user'ı da rollback yapsın.&lt;/p&gt;
&lt;p&gt;&amp;Ouml;ncelikle User ve Address modellerimizi aşağıdaki gibi oluşturalım.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;public class User
   {
       public virtual int Id { get; set; }
       public virtual string Name { get; set; }
       public virtual string SurName { get; set; }
   }&lt;/pre&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;public class Address
   {
       public virtual int Id { get; set; }
       public virtual string CityCode { get; set; }
       public virtual string DistrictCode { get; set; }
       public virtual string Description { get; set; }
       public virtual int UserId { get; set; }
   }&lt;/pre&gt;
&lt;p&gt;Bu modellere ait Nhibernate Mapping'lerini de aşağıdaki gibi oluşturalım.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;public class UserMap : ClassMap&amp;lt;User&amp;gt;
{
    public UserMap()
    {
        Id(x =&amp;gt; x.Id);
        Map(x =&amp;gt; x.Name);
        Map(x =&amp;gt; x.SurName);
        Table("Users");
    }
}&lt;/pre&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;public class AddressMap : ClassMap&amp;lt;Address&amp;gt;
{
    public AddressMap()
    {
        Id(x =&amp;gt; x.Id);
        Map(x =&amp;gt; x.CityCode);
        Map(x =&amp;gt; x.DistrictCode);
        Map(x =&amp;gt; x.Description);
        Map(x =&amp;gt; x.UserId);
        Table("Address");
    }
}&lt;/pre&gt;
&lt;p&gt;Repository kullanımı i&amp;ccedil;in aşağıdaki gibi interface ve generic repo class'larını oluşturalım.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;    public interface IRepository&amp;lt;T&amp;gt; where T : class
    {
        T Get(Guid id);
        IQueryable&amp;lt;T&amp;gt; SelectAll();
        T GetBy(Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; expression);
        IQueryable&amp;lt;T&amp;gt; SelectBy(Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; expression);
        int Insert(T entity);
        void Update(T entity);
    }&lt;/pre&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;  public abstract class BaseRepository&amp;lt;T&amp;gt; : IRepository&amp;lt;T&amp;gt; where T : class
    {
        public ISessionFactory SessionFactory { get; private set; }

        public ISession _session
        {
            get { return this.SessionFactory.GetCurrentSession(); }
        }

        public BaseRepository(ISessionFactory sessionFactory)
        {
            SessionFactory = sessionFactory;
        }

        public T Get(Guid id)
        {
            return _session.Get&amp;lt;T&amp;gt;(id);
        }

        public IQueryable&amp;lt;T&amp;gt; SelectAll()
        {
            return _session.Query&amp;lt;T&amp;gt;();
        }

        public T GetBy(Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; expression)
        {
            return SelectAll().Where(expression).SingleOrDefault();
        }
        public IQueryable&amp;lt;T&amp;gt; SelectBy(Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; expression)
        {
            return SelectAll().Where(expression).AsQueryable();
        }

        public int Insert(T entity)
        {
            var savedId = (int)_session.Save(entity);
            _session.Flush();
            return savedId;
        }

        public void Update(T entity)
        {
            _session.Update(entity);
            _session.Flush();
        }
    }&lt;/pre&gt;
&lt;p&gt;UserRepository ve AddressRepository class'larını aray&amp;uuml;zleri ile birlikte aşağıdaki gibi oluşturalım.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;    public interface IUserRepository : IRepository&amp;lt;User&amp;gt;
    { }

    public class UserRepository : BaseRepository&amp;lt;IUserRepository&amp;gt;
    {
        public UserRepository(ISessionFactory sessionFactory) : base(sessionFactory)
        {
        }
    }
&lt;/pre&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;    public interface IAddressRepository : IRepository&amp;lt;Address&amp;gt;
    { }

    public class AddressRepository : BaseRepository&amp;lt;IAddressRepository&amp;gt;
    {
        public AddressRepository(ISessionFactory sessionFactory) : base(sessionFactory)
        {
        }
    }&lt;/pre&gt;
&lt;p&gt;Repository'lerimiz direkt olarak api'ın controller'ları&amp;nbsp;ile haberleşmesini istemediğimizden bir service katmanımızın olduğunu d&amp;uuml;ş&amp;uuml;nerek UserService adında doğrudan Repository'ler ile iletişim kurabilen class'ımızı oluşturalım ve Unit Of Work interceptor'ı da bu service class'ları seviyesinde container'a inject edeceğiz.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;    public interface IApiService
    {   }

    public interface IUserService : IApiService
    {
        void AddNewUser(AddNewUserRequest reqModel);
    }
    public class UserService : IUserService
    {
        private readonly IUserRepository _userRepository;
        private readonly IAddressRepository _addressRepository;

        public UserService(IUserRepository userRepository, IAddressRepository addressRepository)
        {
            _userRepository = userRepository;
            _addressRepository = addressRepository;
        }

        public void AddNewUser(AddNewUserRequest reqModel)
        {
            var user = new User { Name = reqModel.User.Name, SurName = reqModel.User.SurName };
            var userId = _userRepository.Insert(user);

            var address = new Address { UserId = userId, CityCode = reqModel.Address.CityCode, Description = reqModel.Address.Description, DistrictCode = reqModel.Address.DistrictCode };
            _addressRepository.Insert(address);
        }
    }

    public class AddNewUserRequest
    {
        public UserDto User { get; set; }
        public AddressDto Address { get; set; }
    }
    public class UserDto
    {
        public string Name { get; set; }
        public string SurName { get; set; }
    }
    public class AddressDto
    {
        public string CityCode { get; set; }
        public string DistrictCode { get; set; }
        public string Description { get; set; }
    }
&lt;/pre&gt;
&lt;p&gt;Şimdi ise api end-point'imizi tanılayalım. &amp;nbsp;UserController adında client'ların call yapacağı endpoint aşağıdaki gibi olacaktır.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;    public class UserController : ApiController
    {
        private readonly IUserService _userService;

        public UserController(IUserService userService)
        {
            _userService = userService;
        }

        [HttpPost]
        public virtual HttpResponseMessage AddNewUser(AddNewUserRequest reqModel)
        {
            _userService.AddNewUser(reqModel);
            return Request.CreateResponse();
        }
    }&lt;/pre&gt;
&lt;p&gt;Geliştirmemiz gereken 2 yer kaldı&amp;nbsp;Castle Windsor implementasyonu ve UnitOfWork Interceptor oluşturulması. Projemizde her şeyi interface'ler &amp;uuml;zerinden yaptık ve constructor injection'dan faydalandık. Şimdi ise Repository, Service ve Controller'lar i&amp;ccedil;in bağımlılıkları enjekte edelim ve UnitOfWork Interceptor'ı oluşturalım.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;İlk olarak &lt;strong&gt;NHibernateInstaller.cs&lt;/strong&gt;'i tanımlayalım. Burda web.config/app.config dosyamızda "&lt;strong&gt;ConnString&lt;/strong&gt;" key'iile kayıtlı database conenction string'imiz olduğunu varsayalım ve aşağıdaki gibi tanımlamalarımızı yapalım.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;    public class NHibernateInstaller : IWindsorInstaller
    {
        public void Install(IWindsorContainer container, IConfigurationStore store)
        {
            container.Register(
                Component.For&amp;lt;ISessionFactory&amp;gt;().UsingFactoryMethod(GetSessionFactory).LifestyleSingleton());
        }

        private ISessionFactory GetSessionFactory(IKernel kernel)
        {
            var fluentConfiguration = Fluently.Configure()
               .Database(MsSqlConfiguration.MsSql2012.ConnectionString(c =&amp;gt; c.FromConnectionStringWithKey("ConnString")).ShowSql())
               .Mappings(m =&amp;gt; m.FluentMappings.AddFromAssemblyOf&amp;lt;UserMap&amp;gt;())
               .ExposeConfiguration(cfg =&amp;gt; new SchemaUpdate(cfg).Execute(false, true))
                        .ExposeConfiguration(cfg =&amp;gt;
                        {
                            cfg.CurrentSessionContext&amp;lt;CallSessionContext&amp;gt;();
                        })
               .BuildSessionFactory();

            return fluentConfiguration;
        }
    }&lt;/pre&gt;
&lt;p&gt;İkinci olarak &lt;strong&gt;RepositoryInstaller.cs&lt;/strong&gt;'i oluşturalım. Bu installer ile projemizde bulunan b&amp;uuml;t&amp;uuml;n repository interfacelerini ve onların implementasyonlarını container'a register etmiş olucaz. Her bir repository'i ayrı ayrı register etmek yerine b&amp;uuml;t&amp;uuml;n repository'lerimiz IRepository interface'in den t&amp;uuml;rediğinden container'a IRepository'i implement eden b&amp;uuml;t&amp;uuml;n class'ları register etmesini belirteceğiz.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;    public class RepositoryInstaller : IWindsorInstaller
    {
        public void Install(IWindsorContainer container, IConfigurationStore store)
        {
            container.Register(
                Classes.FromThisAssembly()
                    .Pick()
                    .WithServiceAllInterfaces()
                    .LifestylePerWebRequest()
                    .Configure(x =&amp;gt; x.Named(x.Implementation.Name))
                          .ConfigureIf(x =&amp;gt; typeof(IRepository&amp;lt;&amp;gt;).IsAssignableFrom(x.Implementation), null));
        }
    }&lt;/pre&gt;
&lt;p&gt;&amp;Uuml;&amp;ccedil;&amp;uuml;nc&amp;uuml; olarak &lt;strong&gt;ServiceInstaller.cs&lt;/strong&gt; class'ını tanımlayalım ancak &amp;ouml;ncesinde yukarıda da belirttiğimiz gibi UnitOfWork'&amp;uuml; service seviyesinde container'a register edeceğiz. Sebebi ise repository'e erişimimiz service class'ları &amp;uuml;zerinden olması. UnitOfWork'&amp;uuml; de interceptor olarak yaratacağız ve b&amp;ouml;ylelikle service metoduna girerken session'ı bind edip metot i&amp;ccedil;erisinde herhangi bir exception aldığında rollback yapacağız yada herhangi bir sorun yoksada session'ı commit edip query'leri execute etmesini sağlayacağız.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;    public class UnitOfWorkInterceptor : Castle.DynamicProxy.IInterceptor
    {
        public ISessionFactory SessionFactory;
        private readonly IKernel _kernel;


        public UnitOfWorkInterceptor(ISessionFactory sessionFactory,IKernel kernel)
        {
            _kernel = kernel;
            SessionFactory = sessionFactory;
        }

        public void Intercept(IInvocation invocation)
        {
            ISession currentSession = null;
            try
            {
                currentSession = this.SessionFactory.OpenSession();

                CurrentSessionContext.Bind(currentSession);
                currentSession.BeginTransaction();

                invocation.Proceed();

                var transaction = currentSession.Transaction;
                if (transaction != null &amp;amp;&amp;amp; transaction.IsActive)
                {
                    transaction.Commit();
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                currentSession = CurrentSessionContext.Unbind(SessionFactory);
                if (currentSession != null)
                    currentSession.Close();
            }
        }
    }&lt;/pre&gt;
&lt;p&gt;Yukarıda tanımladığımız interceptor'ı aşağıdaki gibi service'leri register ederken bu service class'larına ait metotlar i&amp;ccedil;in UnitOfWorkInterceptor'ı configure etmesini belirteceğiz.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;    public class ServiceInstaller : IWindsorInstaller
    {
        public void Install(IWindsorContainer container, IConfigurationStore store)
        {
            container.AddFacility&amp;lt;TypedFactoryFacility&amp;gt;();

            container.Register(
                Classes.FromAssemblyContaining&amp;lt;UserService&amp;gt;()
                    .Pick()
                    .WithServiceAllInterfaces()
                    .LifestylePerWebRequest()
                    .Configure(x =&amp;gt; x.Named(x.Implementation.Name))
                          .ConfigureIf(x =&amp;gt; typeof(IApiService).IsAssignableFrom(x.Implementation),
                            y =&amp;gt; y.Interceptors&amp;lt;UnitOfWorkInterceptor&amp;gt;()));

        }
    }&lt;/pre&gt;
&lt;p&gt;Projemiz bir Web Api projesi olduğundan&amp;nbsp;controller'lar ile ilgili container registration işlemleri i&amp;ccedil;in gerekli olan WebApiControllerInstaller.cs class'ı ve ControllerActivator.cs class'ı tanımlamaları da aşağıdaki gibidir.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;    public class ApiControllerActivator : IHttpControllerActivator
    {
        private readonly IWindsorContainer _container;

        public ApiControllerActivator(IWindsorContainer container)
        {
            _container = container;
        }

        public IHttpController Create(
            HttpRequestMessage request,
            HttpControllerDescriptor controllerDescriptor,
            Type controllerType)
        {
            var controller =
                (IHttpController)this._container.Resolve(controllerType);

            request.RegisterForDispose(
                new Release(
                    () =&amp;gt; this._container.Release(controller)));

            return controller;
        }

        private class Release : IDisposable
        {
            private readonly Action _release;

            public Release(Action release)
            {
                _release = release;
            }

            public void Dispose()
            {
                _release();
            }
        }
    }
&lt;/pre&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;    public class WebApiControllerInstaller : IWindsorInstaller
    {
        public void Install(IWindsorContainer container, IConfigurationStore store)
        {
            container.Register(Classes.FromThisAssembly()
                .BasedOn&amp;lt;ApiController&amp;gt;()
                .LifestylePerWebRequest());
        }
    }&lt;/pre&gt;
&lt;p&gt;Geldik son adıma. Yukarıda tanımladığımız b&amp;uuml;t&amp;uuml;n installer class'larını container'a install etmeye. Bunun i&amp;ccedil;in projede yer alan Global.asax.cs i&amp;ccedil;erinde yer alan Application_Start metodu i&amp;ccedil;erisine aşağıdaki gibi installation işlemlerini yapalım.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;        protected void Application_Start()
        {
            var container = new WindsorContainer();
            container.Register(Component.For&amp;lt;UnitOfWorkInterceptor&amp;gt;().LifestyleSingleton());
            container.Install(new ServiceInstaller());
            container.Install(new RepositoryInstaller());
            container.Install(new NHibernateInstaller());
            container.Install(new WebApiControllerInstaller());
            GlobalConfiguration.Configuration.Services.Replace(
                typeof(IHttpControllerActivator),
                new ApiControllerActivator(container));
            GlobalConfiguration.Configure(WebApiConfig.Register);
        }&lt;/pre&gt;
&lt;p&gt;Postman &amp;uuml;zerinden aşağıdaki gibi end-point'imize call yapalım ve hem iki insert işlemininde başarılı olduğu case'i hemde user insert başarılı olduktan sonra address insert sırasında bir hata verdirip ilk işleminde rollback olduğu case'i&amp;nbsp;oluşturup g&amp;ouml;zlemleyebiliriz.&lt;/p&gt;
&lt;p style="text-align: center;"&gt;&lt;img src="/image.axd?picture=/2017/uow_int_img.png" alt="" /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</content>
  <ispublished>False</ispublished>
  <isdeleted>True</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2017-01-08 20:50:00</pubDate>
  <lastModified>2017-08-11 03:54:13</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>unit-of-work-pattern-nedir</slug>
  <tags />
  <comments />
  <categories />
  <notifications />
</post>