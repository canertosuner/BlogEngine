<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>caner</author>
  <title>Server Side Bir Projede Olmazsa Olmazlar || Olursa Güzel Olurlar</title>
  <description>Server-side geliştirme yaparken projemizde olursa olmazsa olmaz OR güzel olur diyebileceğimiz bazı modüller&amp;özellikler vardır ve bu özellikler bir çok kitap yazarı, ünlü blogger veya eğitmenler tarafından kabul görmüş özelliklerdir.</description>
  <content>&lt;p&gt;Server-side geliştirme yaparken projemizde olursa olmazsa olmaz OR g&amp;uuml;zel olur&amp;nbsp;diyebileceğimiz bazı mod&amp;uuml;ller&amp;amp;&amp;ouml;zellikler vardır ve bu &amp;ouml;zellikler bir &amp;ccedil;ok kitap yazarı, &amp;uuml;nl&amp;uuml; blogger veya eğitmenler tarafından kabul g&amp;ouml;rm&amp;uuml;ş &amp;ouml;zelliklerdir. Yazının başlığına bakacak olursak "Olmazsa Olmazlar" şeklinde ancak yazılım denen şey tabi ki "&lt;strong&gt;it depends on the business&lt;/strong&gt;" duruma g&amp;ouml;re,ihtiyaca g&amp;ouml;re geliştirilen bir şey ve "Olmazsa Olmaz" dan kasıt bu zamana kadar hem kendi okuduğum &amp;ccedil;eşitli makalelerde vurgulanan hemde geliştirmiş olduğum &amp;ccedil;eşitli projelerde deneyimlediklerimden yola &amp;ccedil;ıkarak 5&amp;nbsp;farklı &amp;ouml;nemli &amp;ouml;zellik var ki bu &amp;ouml;zellikler ger&amp;ccedil;ekten kurumsal veya b&amp;uuml;y&amp;uuml;k &amp;ccedil;aplı bir projede farkında olarak veya olmadan size olduk&amp;ccedil;a fazla fayda sağlamaktadır.&lt;/p&gt;
&lt;p&gt;Bu 5 başlığı sırasıyla yazacak olursak;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Security,&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exception Handling,&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logging,&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Response Consistency,&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Development Environment&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;nbsp;&lt;img style="display: block; margin-left: auto; margin-right: auto;" src="/image.axd?picture=/2016/11/ws_client_img.png" alt="" width="586" height="386" /&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;1- Security&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Bazı bilgiler vardır uygulamanız i&amp;ccedil;in veya uygulamayı kullanan kişiler i&amp;ccedil;in &amp;ccedil;ok ama &amp;ccedil;ok &amp;ouml;nemlidir. &amp;Ouml;rneğin; tckn bilgisi, banka hesap numarası, userId bilgisi, username-password bilgisi vs. bu gibi bilgilere hi&amp;ccedil; kimsenin ulaşmasını istemeyiz. G&amp;uuml;n&amp;uuml;m&amp;uuml;zde fiddler, wireshark&amp;nbsp;vb. tool'ları kullanarak client-server arasındaki gidip gelen http paketleri rahatlıkla dinlenmekte ve k&amp;ouml;t&amp;uuml; niyetli bazı kişiler araya girerek giden data'da bulunan tckn,accounNumber,amount vs gibi alanları değiştirip bir &amp;ccedil;eşit dolandırıcılık yapabilmekteler. Genel de &amp;ccedil;&amp;ouml;z&amp;uuml;m olarak "ya https yaparız abi hi&amp;ccedil; bişey olmaz.." şeklinde c&amp;uuml;mleler kurulup service'i https olarak dışarıya a&amp;ccedil;arlar ve bu tehlikeyi &amp;ouml;nlediklerini sanarlar ancak&amp;nbsp;artık https bile &amp;ccedil;eşitli yollar denenerek decrypte edilebilmekte.&lt;/p&gt;
&lt;p&gt;Security'den kasıt aslında &lt;strong&gt;token based authentication&lt;/strong&gt; vs. değilde &lt;strong&gt;request&amp;amp;response &lt;/strong&gt;gelip giderken data i&amp;ccedil;in uygulanabilecek security. Tabiki de service'e gelecek olan client'ları belli authentication ve authorization kontrollerinden ge&amp;ccedil;irdikten sonra i&amp;ccedil;eriye almak gibi bir &amp;ccedil;ok y&amp;ouml;ntem mevcut ancak &lt;strong&gt;data-trasnfer&lt;/strong&gt;&amp;nbsp;sırasında belli bazı &amp;ouml;nlemler alarak projenizin g&amp;uuml;venliğini biraz daha atırabilirsiniz.&amp;nbsp;Bunun i&amp;ccedil;in &amp;ccedil;eşitli y&amp;ouml;ntemler bulunmakta.&amp;nbsp;Property bazında istenilen değeri şifleme veya maskeleme. &amp;Ouml;rneğin; &lt;strong&gt;UserLoginRequest&lt;/strong&gt; adında bir modeliniz var ve i&amp;ccedil;erisinde bulunan &lt;strong&gt;UserName, Password&lt;/strong&gt; string alanlarını şifreleyebilirsiniz. Diğer bir y&amp;ouml;ntem ise endpoint'e gelen request ve endpoint'ten &amp;ccedil;ıkan response modellerinizin tamamını şifreleyerek data transferini sağlayabilirsiniz ki bu daha&amp;nbsp;base-oriented bir &amp;ccedil;&amp;ouml;z&amp;uuml;m gibi duruyor. &amp;Ouml;rnek bir response &amp;ouml;rneği aşağıdaki gibi olabilir.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;public class BaseResponse
{
	public object Data {get;set;} // şifrelenmiş bir şekilde endpoint'in return ettiği response Data i&amp;ccedil;erisinde g&amp;ouml;nderilebilir
	public bool IsCrypted {get;set;} her endpoint şifrelenmiş şekilde response d&amp;ouml;nmeyebilir, client'ı bilgilendirmek adına bir bool alan tutabilirsiniz
}&lt;/pre&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Not:&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;Checksum'da unutulmaması gereken diğer bir y&amp;ouml;ntemdir. Checksum kullanarak gelip giden data uzunluğu belli bir algoritma ile şifrelenip &amp;ccedil;ift taraflı kontrol uygulanarak da g&amp;uuml;venlik sağlamak işinizi baya bi kolaylaştırabilir.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;2- Exception Handling&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;"Hatasız kod olmaz.."&lt;/p&gt;
&lt;p&gt;Exception handling her bir proje i&amp;ccedil;in olduk&amp;ccedil;a &amp;ouml;nemli bir konudur. Hatasız kul olmayacağı gibi hatasız kod da olmaz. Exception fırlatabileceğiniz d&amp;uuml;ş&amp;uuml;nd&amp;uuml;ğ&amp;uuml;m&amp;uuml;z yerleri zaten &amp;ouml;nceden tedbirini alıp handle ediyoruzdur ama asıl &amp;ouml;nemli olan beklenmedik hataları nasıl handle edeceğimizdir.&amp;nbsp;En yaygın hatalardan biri olan null reference exception hemen hemen b&amp;uuml;t&amp;uuml;n projelerde başımıza gelmiş bir exception t&amp;uuml;r&amp;uuml;d&amp;uuml;r ve projeniz bu hatayı fırlattığında client'a http500 internal server error d&amp;ouml;necektir. Peki bu t&amp;uuml;r hataları handle etmek i&amp;ccedil;in ne yapmak gerekir ?? Bir &amp;ccedil;ok projede olduğu gibi her yere &lt;strong&gt;try catch&amp;nbsp;&lt;/strong&gt;koyarak kodunuzu spaghetti code haline getirip y&amp;ouml;netilmesi zor bir proje haline getirmek heralde yapılabilecek en kolay &amp;ccedil;&amp;ouml;z&amp;uuml;m. &amp;Ouml;yle projeler var ki denk geldiğim adam try catch e bile g&amp;uuml;venmeyip i&amp;ccedil; i&amp;ccedil;e 2 try catch yazmış.&lt;/p&gt;
&lt;p&gt;Bu ve benzeri durumlardan sakınmak gerekir. Open-source d&amp;uuml;nya ile birlikte exception handling i&amp;ccedil;in bir &amp;ccedil;ok k&amp;uuml;t&amp;uuml;phaneler-y&amp;ouml;ntemler mevcut. Projeniz i&amp;ccedil;in her yerde kullanabileceğiniz k&amp;uuml;&amp;ccedil;&amp;uuml;k k&amp;uuml;&amp;ccedil;&amp;uuml;k&amp;nbsp;&lt;strong&gt;interceptor'&lt;/strong&gt;lar yazarak exception handling'inizi tek bir yerden y&amp;ouml;netebilir ve projenize&amp;nbsp;&lt;strong&gt;reuseable&amp;nbsp;&lt;/strong&gt;fonksiyonaliteler kazandırabilirsiniz.&lt;strong&gt;&amp;nbsp;&lt;a href="/category/Aspect-Oriented-Programming"&gt;Aspect-Oriented Programming&lt;/a&gt; &lt;/strong&gt;anlayışı aslında en g&amp;uuml;zel &amp;ouml;rnek&amp;nbsp;Nuget'te bulunan &amp;ccedil;eşitli k&amp;uuml;t&amp;uuml;phaneler ile bir ka&amp;ccedil; dakika i&amp;ccedil;erisinde bu mod&amp;uuml;lleri projenize ekleyebilirsiniz.&lt;/p&gt;
&lt;p&gt;Bu gibi yapılar ile &amp;ccedil;ok kolay şekilde projenizi y&amp;ouml;netebilir ve tek bir yerden kontrol edilebilir kodlar geliştirebilirsiniz. B&amp;ouml;ylelikle yarın bir g&amp;uuml;n exception handling ile ilgili değişiklikler yapmak istediğinizde bu işlem saatlerinizi almak yerine bir ka&amp;ccedil; dakikada yapabileceğiniz bir geliştirme olacaktır.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;3-&amp;nbsp;Logging&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;"Log, uğrunda &amp;ouml;len olmadıktan sonra log değildir.."&lt;/p&gt;
&lt;p&gt;Log bir projede her şeydir. K&amp;uuml;&amp;ccedil;&amp;uuml;k &amp;ccedil;aplı projeleri baz almazsak log yapısı b&amp;uuml;y&amp;uuml;k &amp;ccedil;apta olan projeler i&amp;ccedil;in olduk&amp;ccedil;a hayati &amp;ouml;nem taşır. &amp;Ouml;yle bir an gelir ki&amp;nbsp;log'a attığınız k&amp;uuml;&amp;ccedil;&amp;uuml;c&amp;uuml;k bir byte size d&amp;uuml;nyaları kazandırır. Tabi log işlemi yaparken kayda değer şeyler logluyor olmak olduk&amp;ccedil;a &amp;ouml;nemlidir. &amp;Ouml;zellikle dışa bağımlı &amp;ccedil;alıştığınız projelerde yani external bir service call işlemi olan yapılarda gelip giden request &amp;amp; response'ları context halinde logluyor olmak olduk&amp;ccedil;a kolaylık sağlar. Gerek db ye gerekse file log yaparken b&amp;uuml;t&amp;uuml;n bu işemleri u&amp;ccedil;tan uca logluyor olmak ve aralarında ilişkileri&amp;nbsp;bir unique identifier kullanarak loglamak gerekir. &amp;Ouml;rnek verecek olursak "getAccountList" adında geliştirdiğiniz bir endpoint var ve client'lar bu endpoint'e request atarak hesap listesini alıyor sizde client bu endpoint'e geldiğinde arka tarafta başka bir endpoint'e gidip hesap listesi ile ilgili farklı service call işlemleri yapıyorsunuz. Geliştirmiş olduğunuz log yapısından beklenen, belli bir context&amp;nbsp;olarak u&amp;ccedil;tan uca hem client'ın request'ini hemde sizin server-side da yapmış olduğunuz diğer servis &amp;ccedil;ağrımlarını logluyor olması gerekir. Bu size şunu kazandırır&amp;nbsp;production'da olan bir m&amp;uuml;şteri ş&amp;ouml;yle bir şikayetle m&amp;uuml;şteri hizmetlerine şikayet bırakabilir "ben saat 11:38'den hesaplarım sayfasını g&amp;ouml;r&amp;uuml;nt&amp;uuml;leyemiyorum, sayfa boş geliyor..." bu gibi durumlarda hemen m&amp;uuml;şteri numarasından yola &amp;ccedil;ıkarak log'ları kontrol ettiğinizde sorunun sizin geliştirdiğiniz service katmanından değilde dışa bağlandığınız service'den kaynaklandığını kolaylıkla g&amp;ouml;rebilirsiniz. Bu logları internal ve external olarak ayırmakta fayda olabilir zira&amp;nbsp;proje m&amp;uuml;d&amp;uuml;r&amp;uuml; sizden ilerleyen zamanlarda y&amp;uuml;zdelik olarak success ve fail oranlarını isteyebilir yani aslında tutmuş olduğunuz log'lardan yola &amp;ccedil;ıkılarak proje y&amp;ouml;neticileri analiz dahi&amp;nbsp;yapmak isteyebilirler. Loglama ile ilgili&amp;nbsp;&amp;ouml;rnek yazıları &lt;a href="/category/Log"&gt;buradan &lt;/a&gt;g&amp;ouml;z atabilirsiniz.&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Not:&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;Log i&amp;ccedil;in &amp;ccedil;ok &amp;ccedil;eşitli open source kaynaklar bulunmakta. Geliştirmelerinizi&lt;strong&gt; loosely coupled&lt;/strong&gt; olacak şekilde&amp;nbsp;yapıyor olursanız ilerde log yapınızla ilgili kolay değişiklik&amp;nbsp;yapabilir, farklı log yapılarına kolay ge&amp;ccedil;işler sağlayabilirsiniz.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;4- Response Consistency&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Response tutarsızlığı herhalde T&amp;uuml;rkiye de geliştirilen server-side projelerde ki en b&amp;uuml;y&amp;uuml;k sorunlardan biri olabilir. Bir &amp;ccedil;ok defa dış servislere bağlı proje geliştirmiş biri olarak aynı namespace altında olup farklı farklı response'lar d&amp;ouml;nen&amp;nbsp;durumlarla epeyce bir karşılaştım. Peki projenizde bulunan end-point'lerin d&amp;ouml;nd&amp;uuml;kleri response'ların tutarlı olması&amp;nbsp;neden &amp;ouml;nemlidir ? Bu sorunun cevabı hem server-side'da bulunan proje a&amp;ccedil;ısından hemde client a&amp;ccedil;ısından&amp;nbsp;b&amp;uuml;y&amp;uuml;k &amp;ouml;neme sahiptir.&lt;/p&gt;
&lt;p&gt;Server-side a&amp;ccedil;ısından; &amp;ouml;ncelikle uygulamada exception-handling, logging, caching vs. gibi&amp;nbsp;&amp;ouml;zellikleri geliştirirken endpoint'lerinizin return ettikleri response'ların bir BaseResponse.cs'den t&amp;uuml;r&amp;uuml;yor olması tercih edildiğinde bu gibi operasyonlar i&amp;ccedil;in yapılması gereken geliştirmelere harcanan eforu hemen hemen&amp;nbsp;yarı yarıya azaltabilirsiniz. Yapmış olduğunuz BaseResponse.cs i&amp;ccedil;erisinde Error case'leri i&amp;ccedil;in de bir property'iniz olması gerekir &amp;ccedil;&amp;uuml;nk&amp;uuml; client'a farklı akışları olan error-exception mesajları d&amp;ouml;nebilirsiniz.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;Ouml;rnek&amp;nbsp;BaseResponse.cs&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;public class BaseResponse
{
	public object Data {get;set;} // endpoint'in return ettiği response
	public ErrorModel Error {get;set;} // endpoint'in return ettiği error model
}&lt;/pre&gt;
&lt;p&gt;Client a&amp;ccedil;ısından; yukarıda ki&amp;nbsp;BaseResponse &amp;ouml;rneğinden yola &amp;ccedil;ıkacak olursak client tarafta geliştirilen network-layer da gelen response a&amp;ccedil;ılarak endpoint'in g&amp;ouml;nderdiği &lt;strong&gt;Data&lt;/strong&gt; i&amp;ccedil;erisinde bulunan ger&amp;ccedil;ek response alınabilir ve&amp;nbsp;sonrasında alt katmanlara g&amp;ouml;nderilip işlenebilir ve bunu yapabiliyor olmak client yazan arkadaşlar bilirler ki b&amp;uuml;y&amp;uuml;k bir nimettir.&amp;nbsp;Servisten hata geldiğinde ise ErrorModel tipinde olan &lt;strong&gt;Error&lt;/strong&gt; property'imiz i&amp;ccedil;erisinde client'a gelen hata mesajı yine network katmanında alınıp base'den hata y&amp;ouml;netimi yapılabilen bir layer'a g&amp;ouml;nderilip gerek pop-up ile hata mesajını g&amp;ouml;sterme gerekse kullanıcının o hata t&amp;uuml;r&amp;uuml;n&amp;uuml; aldığında uygulamada nasıl bir akışa y&amp;ouml;nlendirilmesi gibi işlemler yapılmasına kolaylık sağlanabilir.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;5- Farklı Development Environment&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;"&lt;strong&gt;Dev&lt;/strong&gt; de &amp;ccedil;alışıyor ama &lt;strong&gt;Test&lt;/strong&gt; ortamında &amp;ccedil;alışmıyor..."&lt;/p&gt;
&lt;p&gt;Development environment olduk&amp;ccedil;a &amp;ouml;nemli bir diğer konudur.&amp;nbsp;Farklı ortamlarda geliştirme yapıyor olmak biz developer'lar i&amp;ccedil;in eksik konfigurasyon vs gibi durumlarda başımızı ağrıtan bir durum olsada aslında &amp;ccedil;ok &amp;ouml;nemli bir konudur. Bilindiği &amp;uuml;zre Production seviyesinde geliştirme yapmak m&amp;uuml;mk&amp;uuml;n değil ama geliştirmekte olduğumuz &amp;uuml;r&amp;uuml;n&amp;uuml; prod'a aldığımızda sorunsuz &amp;ccedil;alışması istenir. Projenizi geliştirirken o an geliştirdiğiniz ortam, test işlemlerinin yapıldığı ortam ve production ortamlarının her birinde farklı konfigurasyonların olduğu server'lar sql'ler vs. bulunur. Geliştirme yaparken bu ortamların y&amp;ouml;netimi ve konfig&amp;uuml;rasyonu olduk&amp;ccedil;a basit ve ortamlar arası ge&amp;ccedil;iş sorunsuz 1-2 hareketle ge&amp;ccedil;ilebiliyor olması beklenir.&amp;nbsp;Peki bu development ortamları nelerdir ?&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Development&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;Development ortamı ismindende anlaşıldığı &amp;uuml;zre developer'ların geliştirme yaptığı ortam. Bu ortam developer istediğini yapmakta &amp;ouml;zg&amp;uuml;rd&amp;uuml;r diyebiliriz. Developer kritik kararlar alıp anlık değişiklikleri projede deneyebilir &amp;ccedil;&amp;uuml;nk&amp;uuml; bu ortam onun kendi bireysel ortamıdır diyebiliriz.&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Integration&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;Development ortamında bireysel olarak yapılan geliştirmelerin ortak bir branch'e commit'lenip b&amp;uuml;t&amp;uuml;n geliştirmelerin ortak bir alanda g&amp;ouml;zlemlendiği alan diyebiliriz. Kısaca bu ortamın amacı yapılan işlerin stage'ing den &amp;ouml;nce combine edilip developer'ların saptayabildiği bir hata varsa hemen fix edilip &amp;uuml;r&amp;uuml;n&amp;uuml; g&amp;ouml;r&amp;uuml;c&amp;uuml;ye &amp;ccedil;ıkartma şeklinde tanımlayabiliriz.&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Staging&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;Staging Production'dan &amp;ouml;nceki ortamdır ve sahip olduğu &amp;ouml;zellikler itibari ile production'ın ile bire bir aynı olması beklenir. &amp;Ouml;rneğin benzer &amp;ouml;zelliklere sahip sunucular, sql server'lar, canlıda olan database'in bir g&amp;uuml;n &amp;ouml;ncesinin verilerine sahip bir database vs. gibi.&amp;nbsp;Staging ortamına bir &amp;ccedil;ok yerde Pre-Production da denilmekte.&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Production&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;Son adım olarak da Production ortamı artık geliştirmiş olduğunuz projeyi canlıya aldığınız ve son kullanıcının erişimine a&amp;ccedil;tığınız yerdir. Prod'a gelene kadar ki ortamlarda yapılan geliştirmeler sorunsuz-planlı bir şekilde yapıldığı taktirde testler sonucunda &amp;uuml;r&amp;uuml;n prod'a alınır.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Yazının başında da belirtiğim gibi "&lt;strong&gt;it depends on the business&lt;/strong&gt;" yani işe bağlı projeye bağlı. Olursa g&amp;uuml;zel olur diyebileceğimiz bu mod&amp;uuml;lleri projelerinizde farklı şekillerde d&amp;uuml;ş&amp;uuml;nebilir entegre edebilirsiniz.&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2017-01-09 22:35:00</pubDate>
  <lastModified>2020-01-20 08:22:20</lastModified>
  <raters>2</raters>
  <rating>4.5</rating>
  <slug>server-side-bir-projede-olmazsa-olmazlar</slug>
  <tags>
    <tag>server side</tag>
    <tag>server or client</tag>
    <tag>web service nasıl geliştirilmeli</tag>
    <tag>security</tag>
    <tag>exception handling</tag>
    <tag>logging</tag>
    <tag>response consistency</tag>
    <tag>development environment</tag>
  </tags>
  <comments />
  <categories>
    <category>ebe6cacc-3d21-4b1a-87de-e73b59b91a82</category>
  </categories>
  <notifications />
</post>