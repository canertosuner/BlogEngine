<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>caner</author>
  <title>Postsharp Kullanarak Metot Execution Sürelerini Hesaplama</title>
  <description>Daha önceki aspect oriented yazılarımızda ne aspect oriented'ın ne olduğunu ve nasıl kullanıldığını çeşitli örneklerle anlatmıştık ve AOP yaklaşımı ile yapılabileceklerin sınırının olmadığından bahsetmiştik. Bu yazımızda da özellikle server-side geliştirme yapanların sıkça</description>
  <content>&lt;p&gt;Daha &amp;ouml;nceki &lt;a href="/category/Aspect-Oriented-Programming"&gt;aspect oriented&lt;/a&gt; yazılarımızda ne aspect oriented'ın ne olduğunu ve nasıl kullanıldığını &amp;ccedil;eşitli &amp;ouml;rneklerle&amp;nbsp;anlatmıştık ve AOP yaklaşımı ile yapılabileceklerin sınırının olmadığından bahsetmiştik.&amp;nbsp;Bu yazımızda da &amp;ouml;zellikle server-side geliştirme yapanların sık&amp;ccedil;a ihtiya&amp;ccedil; duyduğu metot execution s&amp;uuml;resinin AOP yaklaşımı ile nasıl yapıldığından bahsedeceğiz.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Yazılımda performans bildiğiniz &amp;uuml;zre&amp;nbsp;en &amp;ouml;nemli konuların başında gelir ve b&amp;uuml;y&amp;uuml;k &amp;ccedil;apta 1 den fazla client'ın consume ettiği bir projeniz var ise metot execution s&amp;uuml;relerini bir yerlerde logluyor olmak bizler i&amp;ccedil;in şu gibi durumlarda hayat kurtarıcı bir rol &amp;uuml;stlenir; client der ki "Abi sayfa 8 saniyede a&amp;ccedil;ılıyor bizde bir sıkıntı yok service'den ge&amp;ccedil; geliyor....vs.", server-side'da geliştirme yapan arkadaşta der ki "Yok abi ben 0.2 saniyede response d&amp;ouml;nm&amp;uuml;ş&amp;uuml;m bu bizden değil...vs.". Bu gibi durumlarda eğer siz service olarak&amp;nbsp;projenizden eminseniz bu durumu&amp;nbsp;kanıtlamak i&amp;ccedil;in&amp;nbsp;en g&amp;uuml;zel &amp;ccedil;&amp;ouml;z&amp;uuml;m metot execution s&amp;uuml;relerini hesaplayıp delil olarak ilgili mercilere sunmak. Ya da bu case'i de ge&amp;ccedil;elim bizler developerlar olarak kendimize "arkadaş bi proje yaptık ama işler nasıl gidiyor, yazılımsal olarak performansı yerinde mi.." vs.&amp;nbsp;gibi soruları sorup cevaplarını da biliyor olmamız gerekir.&lt;/p&gt;
&lt;p&gt;Bunun i&amp;ccedil;in AOP &amp;ccedil;&amp;ouml;z&amp;uuml;mlerinden biri olan Postsharp'dan yararlanacağız. Case şu şekilde olacak; Bir&amp;nbsp;Api projemiz olsun ve MoneyTransfer&amp;nbsp;adında eft-havale-virman işlemlerini yapan&amp;nbsp;end-point geliştirelim ve bu end-point'e gelen request-response'ların execution s&amp;uuml;relerini LoggingAspect kullanarak loglayalım.&lt;br /&gt;&lt;br /&gt;*PostSharp kurulumu vs bilgileri i&amp;ccedil;in &lt;a href="/post/PostSharp-Exception-Handling"&gt;şu &lt;/a&gt;yazıyı inceleyebilirsiniz.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;    [Serializable]
    public class LoggingAspect : OnMethodBoundaryAspect
    {
        private readonly Stopwatch timer = new Stopwatch();  

        public override void OnEntry(MethodExecutionArgs args)
        {
            timer.Start();
        }

        public override void OnExit(MethodExecutionArgs args)
        {
           var executionTime = timer.ElapsedMilliseconds;
            timer.Stop();
            var logMessage = "Method : " args.Method.Name +  " Execution Time : " + executionTime + " Millisecond";
            Console.Write(logMessage );
        }
    }&lt;/pre&gt;
&lt;p&gt;Sırada &lt;strong&gt;MoneyTransfer&amp;nbsp;&lt;/strong&gt;işlemi yapan metodu yazalım ve bu metot parametre olarak&amp;nbsp;&lt;strong&gt;TransferRequest&lt;/strong&gt; objesi alsın ve response olarak &lt;strong&gt;TransferResponse&lt;/strong&gt; adında bir model d&amp;ouml;ns&amp;uuml;n.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;        [LoggingAspect]
        public TransferResponse MoneyTransfer(TransferRequest request)
        {
            // back-end kodlarınız

            var resp = new TransferResponse
            {
                IsSuccess = true,
                Message = "Transfer İşleminiz Ger&amp;ccedil;ekleşti."
            };
            return resp;
        }

        public class TransferRequest
        {
            public decimal Amount { get; set; }
            public string SenderIBAN { get; set; }
            public string ReceiverIBAN { get; set; }
        }

        public class TransferResponse
        {
            public bool IsSuccess { get; set; }
            public string Message { get; set; }
        }
    }&lt;/pre&gt;
&lt;p&gt;Hepsi bu kadar artık yazdığımız kodları test edebiliriz. TransferMoney metoduna request yolladığımızda metot scope'ları i&amp;ccedil;erisindeki kodları run etmeden aspect'imiz i&amp;ccedil;erisinde bulunan OnEntry metoduna girecektir ve burada timer'ı start ediyoruz. Sonrasında metot scope'ları i&amp;ccedil;erisinde bulunan kodları &amp;ccedil;alıştırıp metottan &amp;ccedil;ıktıktan sonra OnExit metoduna girip timer'ı stop edip devamında&amp;nbsp;execution s&amp;uuml;resini&amp;nbsp;millisecond cinsinden Console'a yazacaktır.&lt;/p&gt;
&lt;p&gt;Metot execution s&amp;uuml;resi yukarıda da belirttiğim gibi &amp;ouml;nemli bir konudur ve ne nerde ne kadar s&amp;uuml;re harcayıp client'a gidiyor bunu &amp;ouml;l&amp;ccedil;eklendirebiliyor olmak gerekir.&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Not:&lt;/strong&gt;&lt;/span&gt;&amp;nbsp;&amp;Ccedil;ok uzun s&amp;uuml;ren execution s&amp;uuml;relerinin &amp;ccedil;ok b&amp;uuml;y&amp;uuml;k bir ihtimalle networksel sorunlardan dolayı kaynaklanabileceği ihtimalini de unutmamak gerekir.&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2017-06-09 21:06:00</pubDate>
  <lastModified>2020-01-20 08:22:17</lastModified>
  <raters>1</raters>
  <rating>5</rating>
  <slug>postsharp-kullanarak-metot-execution-surelerini-hesaplama</slug>
  <tags>
    <tag>postman</tag>
    <tag>Aspect-Oriented Programming</tag>
    <tag>measuring execution time</tag>
    <tag>Logging Interceptor</tag>
    <tag>Logging ASpect</tag>
    <tag>metot süresi</tag>
    <tag>Execution Time</tag>
  </tags>
  <comments>
    <comment id="b3a00c79-4b89-4dc8-8fae-09cac7b9e9b2" parentid="00000000-0000-0000-0000-000000000000" approved="False" spam="False" deleted="True">
      <date>2018-02-02 11:28:34</date>
      <author>Ünal</author>
      <email>unalyeten@hotmail.com</email>
      <country />
      <ip>176.240.17.136</ip>
      <avatar />
      <content>Merhaba,

Öncelikle makale için teşekkür ederim. Makaleniz benim için yol gösterici oldu. 

Yukarıda verdiğiniz örneği bir konsol projesi ile denedim ve sonuçlarda bir sorun olduğunu gözlemledim. MoneyTransfer(TransferRequest request) metodu for döngüsü içinde 10 kez çalıştırdığımda consol cıktısında metod için harcanan süre 0ms göründü. Sonra MoneyTransfer(TransferRequest request) metodu içine &amp;quot;Thread.Sleep(10)&amp;quot; satırını ekledim ve kodu tekrar for döngüsü içinde 10 kez çalışıtırdım. Yeni sonuçlarda metod çalışma sürelerinde bir değişiklik oluştu. Yeni çıktıda Execution Time değeri devamlı katlanmış gibi göründü.

1- Method : MoneyTransfer Execution Time : 11 Millisecond
2- Method : MoneyTransfer Execution Time : 22 Millisecond
3- Method : MoneyTransfer Execution Time : 33 Millisecond
4- Method : MoneyTransfer Execution Time : 44 Millisecond
5- Method : MoneyTransfer Execution Time : 55 Millisecond
6- Method : MoneyTransfer Execution Time : 66 Millisecond
7- Method : MoneyTransfer Execution Time : 77 Millisecond
8- Method : MoneyTransfer Execution Time : 88 Millisecond
9- Method : MoneyTransfer Execution Time : 98 Millisecond
10-Method : MoneyTransfer Execution Time : 109 Millisecond

Sanıyorum bu durum StopWatch&amp;#39;ın statik tanımlamasından kaynaklanıyor. OnEntry(MethodExecutionArgs args) metodu içindeki &amp;quot;timer.Start();&amp;quot; satırı öncesine &amp;quot;timer.Reset();&amp;quot; satırını ekledim ve kodu tekrar çalıştırdım sonuç aşağıdaki gibi oldu.

1- Method : MoneyTransfer Execution Time : 11 Millisecond
2- Method : MoneyTransfer Execution Time : 10 Millisecond
3- Method : MoneyTransfer Execution Time : 10 Millisecond
4- Method : MoneyTransfer Execution Time : 10 Millisecond
5- Method : MoneyTransfer Execution Time : 11 Millisecond
6- Method : MoneyTransfer Execution Time : 10 Millisecond
7- Method : MoneyTransfer Execution Time : 10 Millisecond
8- Method : MoneyTransfer Execution Time : 10 Millisecond
9- Method : MoneyTransfer Execution Time : 10 Millisecond
10-Method : MoneyTransfer Execution Time : 10 Millisecond

Metodların çalışma sürelerini sizin örneğinizdeki gibi hesaplayan başka örnekler ilede deneme yaptığımda &amp;quot;http://theburningmonk.com/2010/03/aop-method-execution-time-watcher-with-postsharp/&amp;quot; bu linkteki yaklaşımın daha doğru sonuçlar verdiğini gördüm. Örneğinize &amp;quot;timer.Reset();&amp;quot; satırını ekleyince sizin örneğinizde istediğim gibi çalışıyor. Bu durum hakkında sizin yorumunuz bulunuyor mu?</content>
    </comment>
    <comment id="a5146b41-2989-4c6f-8415-1b40c4d1fcc8" parentid="b3a00c79-4b89-4dc8-8fae-09cac7b9e9b2" approved="True" spam="False" deleted="False">
      <date>2018-02-08 18:53:12</date>
      <author>caner</author>
      <email>canertosuner@gmail.com</email>
      <country />
      <ip>95.70.162.38</ip>
      <moderatedby>Rule:authenticated</moderatedby>
      <content>Merhaba, değerli yorumun  için teşekkürler.
Haklısın stopWatch nesnesini static olarak bu şekilde kullanımı doğru değil, kullanılıyorsa da reset() metodu çağrılmalı ancak bu örneği geliştirdiğim projede IoC container&amp;#39;da vardı ve bu aspect container&amp;#39;a perRequest başına instance oluşturacak şekilde register edilmişti bu sebeple ben geliştirmeyi yaparken belirttiğin soruna denk gelmedim. Tekrardan  yorumun için teşekkürler.</content>
    </comment>
  </comments>
  <categories>
    <category>af2ae59a-5e53-4ebf-b52e-cbba606354f4</category>
  </categories>
  <notifications>
    <email>unalyeten@hotmail.com</email>
  </notifications>
</post>