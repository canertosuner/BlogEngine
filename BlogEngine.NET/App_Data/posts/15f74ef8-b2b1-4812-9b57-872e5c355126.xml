<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>caner</author>
  <title>Log4Net İmplementasyonu</title>
  <description>Önceki çalıştığım firmalardan birinde uzun soluklu bir bankacılık projesi geliştiriyorduk ve daha önce ilgilenen arkadaşlar bilirler ki development süreci oldukça meşakatlidir. Önce Dev de çalış sonra Test'e at sonra UAT e al sonra PROD a taşı orda testleri yap vs. vs. bir sürü ortam birsürü bug</description>
  <content>&lt;p&gt;&lt;strong&gt;&lt;span style="font-size: small;"&gt;"Log uğrunda &amp;ouml;len olmadıktan sonra log değildir !!"&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="font-size: small;"&gt;&amp;Ouml;nceki &amp;ccedil;alıştığım firmalardan birinde uzun soluklu bir bankacılık projesi geliştiriyorduk ve daha &amp;ouml;nce ilgilenen arkadaşlar bilirler ki development s&amp;uuml;reci olduk&amp;ccedil;a meşakatlidir. &amp;Ouml;nce Dev de &amp;ccedil;alış sonra Test'e at sonra UAT e al sonra PROD a taşı orda testleri yap vs. vs. bir s&amp;uuml;r&amp;uuml; ortam birs&amp;uuml;r&amp;uuml; bug ve en &amp;ouml;nemlisi y&amp;uuml;zlerce ş&amp;ouml;yle c&amp;uuml;mleler duyabilirsiniz "TEST te sıkıntı yok ama UAT de &amp;ccedil;alışmıyor yada sadece PROD da rastladığımız bir durum..." bu gibi durumlarda loglardan y&amp;uuml;r&amp;uuml;yerek ilerlemek sorunun kaynağına en kısa s&amp;uuml;rede ulaşmanızı sağlayabilir. Tabi log alt yapınız var ise :) Ama bitmedi log altyapınızın olmasıda o loga bir bakış attığınızda ahanda tamam sorunu buldum diyebileceğiniz anlamına gelmeyebilir. &amp;Ccedil;ok fazla yaşadığım bir olaydan bahsetmek istiyorum ve bir arkadaşımın bu olay sonrası projedeki Test M&amp;uuml;h. arkadaşa s&amp;ouml;ylediği bir c&amp;uuml;mle varki efsane :)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="font-size: small;"&gt;Birg&amp;uuml;n yine &amp;uuml;stte bahsettiğim bankacılık projesinde dev yapıyorum ve ekip yaklaşık olarak 10 kişi falan (.net-ios-android-pm-tester vs.). Yine o sihirli c&amp;uuml;mle geldi ve test m&amp;uuml;h arkadaş android yazan arkadaşa "droidci arkadaş PROD da rastlanan bir hata varmış ve m&amp;uuml;şteri ilgili maddeyi JIRA da a&amp;ccedil;mış ve logları paylaşmış. Sorunu kısa s&amp;uuml;rede &amp;ccedil;&amp;ouml;zebilir misin.." vs şeklinde bir c&amp;uuml;mle kurdu. Developer arkadaş JIRA yı a&amp;ccedil;tı madde yi okudu ve loglara baktıktan sonra test m&amp;uuml;h arkadaşa "maddeyi bulamadım, m&amp;uuml;şteriye geri assign ediyorum.." gibi birşey s&amp;ouml;yledi ve test m&amp;uuml;h arkadaş da "ama nasıl bulamazsın loglarıda yollamışlar ki.. -%&amp;amp;?!?.." Bu c&amp;uuml;mleye atarlanan developer arkadaş işte o anda o efsane atas&amp;ouml;z&amp;uuml;n&amp;uuml; s&amp;ouml;yledi. "&lt;strong&gt;Log uğrunda &amp;ouml;len olmadıktan sonra LOG değildir arkadaşım..!&lt;/strong&gt;" Sonu&amp;ccedil; olarak ne oldu sizce ? Log var madde var ama &amp;ccedil;&amp;ouml;z&amp;uuml;m i&amp;ccedil;in elde hi&amp;ccedil;bir şey yok. Yazılım projelerinde &amp;ccedil;ok b&amp;uuml;y&amp;uuml;k &amp;ouml;neme sahip olan log yapıları emin olun hayat kurtarır. &amp;nbsp;&amp;Ccedil;eşitli loglama t&amp;uuml;rleri vardır. DBLog, FileLog vs gibi. Bu &amp;ouml;rnekte hemen hemen herkesin en azından duymuş olduğu Log4Net k&amp;uuml;t&amp;uuml;panesini kullanarak orta &amp;ccedil;aplı bir FileLog&amp;nbsp;yapısı nasıl kurulur ondan bahsedicem. Log4Net i&amp;ccedil;in &amp;ouml;ncelikle Nugetten ilgili dosyayı indirip projemize kuruyoruz&amp;nbsp;Install-Package log4net&amp;nbsp; &amp;nbsp; Daha sonra aşağıda olduğu gibi&amp;nbsp;ILog adında bir interface tanımlıyorum.&amp;nbsp;Parametre olarak LogModel t&amp;uuml;r&amp;uuml;nde bir obje alıyor olacak. Bu obje i&amp;ccedil;erisinde loglamak istediğimiz alanlar mevcut olacak.&lt;/span&gt;&lt;/p&gt;
&lt;pre class="brush: c-sharp; first-line: 1; tab-size: 4; toolbar: false; "&gt;public class LogModel
    {
        public string ExcMessage{get;set;}
        public Exception ExceptionModel{get;set;}
      }

  public interface ILog
    {
        void Log(LogModel entry);
     }&lt;/pre&gt;
&lt;p&gt;&lt;span style="font-size: small;" data-mce-mark="1"&gt;Log4Net i&amp;ccedil;in WebConfig de birtakım ayarlar yapmamız gerekiyor. Bu ayarların kapsamı &amp;ccedil;ok fazla ancak kısaca &amp;ouml;zetlemek gerekirse LogDosyalarının adlandırılması, LogDosyalarının bulunacağı path bilgisi, max ka&amp;ccedil; MB lık dosyalar tutulacak ve enfazla ka&amp;ccedil; dosya olmasına izin verilecek gibi bir &amp;ccedil;ok LogConfig Settings diyebileceğimiz şey i&amp;ccedil;ermekte. Bu projedeki WebConfig dosyası asağıda olduğu şekildedir.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre class="brush: xml; first-line: 1; tab-size: 4; toolbar: false; "&gt; &amp;lt;appender name="LogFileAppender" type="log4net.Appender.RollingFileAppender"&amp;gt;

      &amp;lt;file value="LogFiles\\" /&amp;gt;

      &amp;lt;appendToFile value="true" /&amp;gt;

      &amp;lt;DatePattern value="yyyy\\\\MM\\\\dd'.day.logs.txt'" /&amp;gt;

      &amp;lt;rollingStyle value="Date" /&amp;gt;

      &amp;lt;maxSizeRollBackups value="7" /&amp;gt;

      &amp;lt;param name="StaticLogFileName" value="false" /&amp;gt;

      &amp;lt;layout type="log4net.Layout.PatternLayout"&amp;gt;

        &amp;lt;conversionPattern value="%newline%date %newline%logger [%property{NDC}] %newline&amp;gt;&amp;gt; %message%newline" /&amp;gt;

      &amp;lt;/layout&amp;gt;

     &amp;lt;/appender&amp;gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style="font-size: small;"&gt;Şimdi sırada Loglama işlemini y&amp;ouml;netecek bir Log4Manager' ihtiyacımız var. Burda yarın bir g&amp;uuml;n XManager YManager da tanımlayabiliriz. Bunun bir &amp;ccedil;ok implementasyonu olabilir. Ben b&amp;ouml;yle birşey kullanmayı tercih ettim. ILog, IDisposable interfacelerinden t&amp;uuml;reyen&amp;nbsp;&lt;/span&gt;Log4NetLogManager&amp;nbsp;&lt;span style="font-size: small;"&gt;adında bir class yazıyoruz. Class ın i&amp;ccedil;eriği aşağıdaki gibi olacaktır.&lt;/span&gt;&lt;span style="font-size: small;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="font-size: small;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre class="brush: c-sharp; first-line: 1; tab-size: 4; toolbar: false; "&gt;public class Log4NetLogManager : ILog, IDisposable
    {
         private log4net.ILog log4Net;
         public Log4NetLogManager()
        {
            log4net.Config.DOMConfigurator.Configure();
            log4Net = log4net.LogManager.GetLogger(typeof(Log4NetLogManager));
        }
         public void Log(LogModel entry)
        {
            log4Net.Error(entry.ExpMessage, entry.ExceptionModel);
        }
         public void Dispose()
        {
            if (log4Net != null)
                log4Net.Logger.Repository.Shutdown();
        }
    }&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style="font-size: small;"&gt;İşlemlerimiz bu kadar. Bu saatten sonra tek yapmamız gereken bu manager'ı kullanan logic ler yazmaktır. Bir sonraki &amp;ouml;rneğimizde ASP.Net WebApi tarafında ExceptionHandling olaylarına girip yukarıda yazmış olduğumuz Manager'ı kullanan bir app yazacağız.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2016-02-12 17:07:00</pubDate>
  <lastModified>2020-01-20 08:22:26</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>Log4Net-Entegrasyonu</slug>
  <tags>
    <tag>log4net</tag>
    <tag>log</tag>
    <tag>C#</tag>
  </tags>
  <comments />
  <categories>
    <category>ebe6cacc-3d21-4b1a-87de-e73b59b91a82</category>
    <category>59c799ee-35b7-40dc-911f-1d8613b862f2</category>
  </categories>
  <notifications />
</post>