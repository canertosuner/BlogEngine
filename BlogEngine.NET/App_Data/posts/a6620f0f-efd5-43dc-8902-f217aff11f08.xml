<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>caner</author>
  <title>Nhibernate IPreInsertEventListener ve IPreUpdateEventListener Kullanımı</title>
  <description>Server-side bir projede geliştirme yapıyorsanız ve db de bolca CRUD işlemleri için query'ler çalıştırmanız gerekiyorsa sizden db de kaydedilen o row için sizden insert veya update anında bazı bilgileri otomatik bir şekilde o row için kaydetmeniz istenebilir.</description>
  <content>&lt;p&gt;Server-side bir projede geliştirme yapıyorsanız&amp;nbsp;ve db de bolca CRUD işlemleri i&amp;ccedil;in query'ler &amp;ccedil;alıştırmanız gerekiyorsa sizden db de kaydedilen o row i&amp;ccedil;in sizden insert veya update anında bazı bilgileri otomatik bir şekilde o row i&amp;ccedil;in kaydetmeniz istenebilir. &amp;Ouml;rnek olarak; CreatedDate veya update edilen değer i&amp;ccedil;in ModifiedDate gibi alanlar tutmanız&amp;nbsp;muhakkak istenir istenmese dahi bu bilgileri ilgili colum'lar da tutmak muhakkak bir g&amp;uuml;n işinize yarayacaktır.&lt;/p&gt;
&lt;p&gt;Eğer CRUD işlemlerini&amp;nbsp;Ado.Net kullanarak yapıyorsanız query'nin sonuna bu değerleri ekleyebilir yada stored-procedure kullanıyorsanız da bu işlemleri sp i&amp;ccedil;erisinde de yapabiliriz.&lt;/p&gt;
&lt;p&gt;Bu yazımızda bu ve benzeri işlemleri Fluent-Nhibernate kullanarak nasıl yapabiliriz konusuna değineceğiz.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Her defasında yeni kayıt geldi modeli initialize ederken&amp;nbsp;&lt;strong&gt;CreatedDate&lt;/strong&gt;&amp;nbsp;alanına&lt;strong&gt;&amp;nbsp;DateTime.Now&lt;/strong&gt;&amp;nbsp;set et, yada her update işlemi geldiğinde&amp;nbsp;&lt;strong&gt;ModifiedDate&lt;/strong&gt;&amp;nbsp;alanına&lt;strong&gt;&amp;nbsp;DateTime.Now&lt;/strong&gt;&amp;nbsp;alanını set et. Pek de hoş durmuyor sanki. 50'ye yakın db de tablonuz olduğunu d&amp;uuml;ş&amp;uuml;n&amp;uuml;n her bir entity i&amp;ccedil;in gidip bu işlemleri heralde&amp;nbsp;yapmak istemeyiz .&lt;/p&gt;
&lt;p&gt;Eğer proejenizde NHibernate'i kullanıyorsanız Nhibernate bu işlemler i&amp;ccedil;in bizlere aşağıdaki interface'leri sunmakta.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IPreInsertEventListener&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IPreUpdateEventListener&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;IPreInsertEventListener&lt;/strong&gt;; adında da anlaşılacağı &amp;uuml;zre entity'niz insert edilirken bir interceptor gibi araya girmemizi sağlayan&amp;nbsp;ve insert query execution'dan&amp;nbsp;&lt;strong&gt;OnPreInsert&amp;nbsp;&lt;/strong&gt;adındaki metoduna invoke edilerek entity'niz &amp;uuml;zerinde işlemler yapmanızı sağlar.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IPreUpdateEventListener&lt;/strong&gt;; ise bir update listener'ı dır ve i&amp;ccedil;erisinde implement edebildiğimiz&amp;nbsp;&lt;strong&gt;OnPreUpdate&lt;/strong&gt;&amp;nbsp; metodu &amp;ccedil;ağrılır update query'sinin execution'dan &amp;ouml;nce&amp;nbsp;call edilerek yine entity &amp;uuml;zerinde değişiklikler yapabilmemizi sağlar.&lt;/p&gt;
&lt;p&gt;&amp;Ouml;rnek olarak bir BaseModel'miz olsun ve projemizde bulunan her bir entity i&amp;ccedil;in tablolarda ortak bulunan alanları bu class i&amp;ccedil;erisinde tanımlayabiliriz.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;    public abstract class BaseModel
    {
        public virtual Guid Id { get; set; }
        public virtual DateTime? CreatedDate { get; set; }
        public virtual DateTime? ModifiedDate { get; set; }
    }&lt;/pre&gt;
&lt;p&gt;Db de bulunan tablolarımıza karşılık gelen&amp;nbsp;entity'lerimiz ise yukarıda tanımladığımız BaseModel class'ından inherit olacaklar. &amp;Ouml;rnek olarak Customer adında aşağıdaki gibi bir entity tanımlayalım.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;    public class Customer : BaseModel
    {
        public virtual string FirstName { get; set; }
        public virtual string LastName { get; set; }
        public virtual string Email { get; set; }
    }&lt;/pre&gt;
&lt;p&gt;Şimdi ise CustomerMap class'ını oluşturacaz ancak &amp;ouml;ncesinde BaseModel i&amp;ccedil;erisinde bulunan proeprty'ler i&amp;ccedil;in BaseMapping adında bir class tanımlayalım. Customer ve diğer db modellerimizde bu BaseMapping'i kullanarak map işlemlerini yapacağız. Bunu yapmamızdaki ama&amp;ccedil; her bir entity i&amp;ccedil;in ayrı ayrı gidip BaseModel i&amp;ccedil;erisinde bulunan alanların map'ini yapmamak.&amp;nbsp;&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;    public class BaseMapping&amp;lt;T&amp;gt; : ClassMap&amp;lt;T&amp;gt; where T : BaseModel
    {
        public BaseMapping()
        {
            Id(x =&amp;gt; x.Id);
            Map(x =&amp;gt; x.CreatedDate);
            Map(x =&amp;gt; x.ModifiedDate);
        }
    }&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Artık BaseMapping 'i kullanarak CustomerMap class'ını oluşturabiliriz.&amp;nbsp;&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;    public class CustomerMap : BaseMapping&amp;lt;Customer&amp;gt;
    {
        public CustomerMap()
        {
            Map(x =&amp;gt; x.FirstName);
            Map(x =&amp;gt; x.LastName);
            Map(x =&amp;gt; x.Email);
        }
    }&lt;/pre&gt;
&lt;p&gt;Sırada Listener class'ını oluşturmak var. Aşağıda&amp;nbsp;&lt;strong&gt;NHInsertUpdateListener&amp;nbsp;&lt;/strong&gt;adında bir class tanımlayalım. Yazının başında bahsettiğimiz her tablomuzda bulunan CreatedDate ve ModifiedDate tarih alanlarını&amp;nbsp;&lt;strong&gt;NHInsertUpdateListener&amp;nbsp;&lt;/strong&gt;i&amp;ccedil;erisinde set edeceğiz.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;    public class NHInsertUpdateListener : IPreInsertEventListener, IPreUpdateEventListener
    {
        public bool OnPreUpdate(PreUpdateEvent @event)
        {
            var audit = @event.Entity as BaseModel;
            if (audit == null)
                return false;

            var time = DateTime.Now;

            Set(@event.Persister, @event.State, "CreatedDate", time);

            audit.CreatedDate = time;

            return false;
        }

        public bool OnPreInsert(PreInsertEvent @event)
        {
            var audit = @event.Entity as BaseModel;
            if (audit == null)
                return false;


            var time = DateTime.Now;

            Set(@event.Persister, @event.State, "ModifiedDate", time);

            audit.ModifiedDate = time;

            return false;
        }

        private void Set(IEntityPersister persister, object[] state, string propertyName, object value)
        {
            var index = Array.IndexOf(persister.PropertyNames, propertyName);
            if (index == -1)
                return;
            state[index] = value;
        }
    }&lt;/pre&gt;
&lt;p&gt;Artık son adım olarak FluentNHibernate'i ayağa kaldırmak var. Nh configuration'ı aşağıdaki gibi tanımlayabiliriz.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;Fluently.Configure()
               .Database(MsSqlConfiguration.MsSql2012.ConnectionString(c =&amp;gt; c.FromAppSetting("dbConnectionString")).ShowSql())
               .Mappings(m =&amp;gt; m.FluentMappings.AddFromAssemblyOf&amp;lt;CustomerMap&amp;gt;())
               .ExposeConfiguration(cfg =&amp;gt; new SchemaUpdate(cfg).Execute(false, true))
               .ExposeConfiguration(cfg =&amp;gt;
               {
                   cfg.SetProperty(
                      NHibernate.Cfg.Environment.CurrentSessionContextClass,
                       "web");
                   cfg.AppendListeners(ListenerType.PreUpdate, new IPreUpdateEventListener[] { new NHInsertUpdateListener() });
               })
               .BuildSessionFactory();&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Sırasıyla yazmak gerekirse neler yaptık;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Vs da bir tane proje oluşturduk. (Console veya Api),&lt;/li&gt;
&lt;li&gt;FluentNHibernate paketini nuget'ten indirip kurduk,&lt;/li&gt;
&lt;li&gt;Bir db miz olduğunu ve connection string bilgisinin web config'de tanımlı olduğunu varsaydık,&lt;/li&gt;
&lt;li&gt;Tablolarda ortak kullanılan propert'leri BaseModel adında ki class da topladık,&lt;/li&gt;
&lt;li&gt;Daha sonra&amp;nbsp;BaseMapping adında bir mapping tanımlaması yaparak entity i&amp;ccedil;erisindeki property'leri map ettik,&lt;/li&gt;
&lt;li&gt;CustomerMap class'ını oluşturarak&amp;nbsp;mapping işlemini tanımladık,&lt;/li&gt;
&lt;li&gt;NHInsertUpdateListener'ı oluşturduk ve CreatedDate - ModifiedDate alanları i&amp;ccedil;in değerleri&amp;nbsp;set ettik.&lt;/li&gt;
&lt;li&gt;Fluent Nhibernate konfigurasyonunu oluşturduk.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;nbsp;Listener'lar&amp;nbsp;biraz az bilinen&amp;nbsp;bir &amp;ouml;zellik gibi g&amp;ouml;r&amp;uuml;nse de olduk&amp;ccedil;a faydalıdırlar. &amp;Ouml;rnekte olduğu gibi benzer case'lerde&amp;nbsp;kullanarak bizleri satırlarca tekrar eden kodlardan uzaklaştırır.&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2017-08-02 21:42:00</pubDate>
  <lastModified>2020-01-20 08:22:16</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>nhibernate-ipreinserteventlistener-ve-ipreupdateeventlistener-kullanimi</slug>
  <tags>
    <tag>nhibernate</tag>
    <tag>fluent nhibernate</tag>
    <tag>listeners</tag>
    <tag>nhibernate listener</tag>
    <tag>nhibernate listener set entity</tag>
    <tag>IPreInsertEventListener</tag>
    <tag>IPreUpdateEventListener</tag>
  </tags>
  <comments />
  <categories>
    <category>91467d82-b6b4-4b4d-ab9a-f3a25c7c7447</category>
    <category>893b792b-cf43-45bb-af68-eecfaf416ddf</category>
    <category>45609306-8fde-4db1-8d81-7fe1bf2b9738</category>
  </categories>
  <notifications />
</post>