<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>caner</author>
  <title>C# 7.0 Yenilikleri</title>
  <description>Daha C# 6.0 'ın tüm özelliklerini yeni yeni kavramışken Microsoft C# 7.0 ile gelecek olan özelliklerden bazılarını açıkladı bile. Gelecek olan feature'lara baktığımızda çokta fazla major yenilikler yok gibi ancak yine de kayda değer şeyler var. Gelin bu feauture'ları ufaktan bi inceleyelim</description>
  <content>&lt;p&gt;Daha&amp;nbsp;&lt;a href="http://canertosuner.com/post/C-6-ile-Gelen-Yenilikler"&gt;C# 6.0&lt;/a&gt;&amp;nbsp;'ın t&amp;uuml;m &amp;ouml;zelliklerini yeni yeni kavramışken Microsoft C# 7.0 ile gelecek olan &amp;ouml;zelliklerden bazılarını a&amp;ccedil;ıkladı bile. Gelecek olan feature'lara baktığımızda &amp;ccedil;okta fazla major yenilikler yok gibi ancak yine de kayda değer şeyler var. Gelin bu feauture'ları ufaktan bi inceleyelim.&lt;/p&gt;
&lt;p&gt;&amp;Ouml;ncelikle C#7.0 ın &amp;ouml;zellikleri VS2015'de default olarak yok. Normalde vs2015'de yeni bir proje a&amp;ccedil;tığınızda default C# 6.0 ile gelir. 7.0'ın &amp;ouml;zelliklerini aktifleştirmek i&amp;ccedil;in VS de proje oluştururken ufak bir ka&amp;ccedil; şey yapmak gerekiyor.&lt;/p&gt;
&lt;p&gt;İlk olarak C#da bir tane console proje oluşturalım ve sonrasında solution'da bulunan projeye sağ tıklayıp &amp;ouml;zellikler diyelim. A&amp;ccedil;ılan ekrandan Build tabına ge&amp;ccedil;elim ve "&lt;strong&gt;conditional compilation symbols&lt;/strong&gt;" textbox'ına&amp;nbsp;&lt;strong&gt;__DEMO__ &lt;/strong&gt;yazalım. Projeyi build ettikten sonra artık C# 7.0 &amp;ouml;zelliklerini otomatik olarak alacaktır.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;img style="display: block; margin-left: auto; margin-right: auto;" src="/image.axd?picture=%2f2016%2f06%2fvs_c7_0_activate.png" alt="" width="581" height="166" /&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;C# 7.0 Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Local functions&lt;/li&gt;
&lt;li style="box-sizing: border-box;"&gt;Binary literals&lt;/li&gt;
&lt;li style="box-sizing: border-box;"&gt;Digit separators&lt;/li&gt;
&lt;li style="box-sizing: border-box;"&gt;Pattern matching&lt;/li&gt;
&lt;li style="box-sizing: border-box;"&gt;Ref returns and locals&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;Local functions&lt;/h3&gt;
&lt;p&gt;Bir &amp;ccedil;ok yazılım dili fonksiyon i&amp;ccedil;inde fonksiyon yazımına izin verirken C# i&amp;ccedil;in bu ge&amp;ccedil;erli değildi. 7.0 ile artık fonksiyon i&amp;ccedil;erisine fonksiyon tanımlıyor olacağız.&lt;/p&gt;
&lt;pre class="brush: c-sharp; first-line: 1; tab-size: 4; toolbar: false; "&gt;public int Method_1(int x,int y)
	{
		int Metho_2(int x)
		{
			return x*x;
		}
	 
		return Metho_2(x)*y;
	}&lt;/pre&gt;
&lt;h3&gt;&amp;nbsp;&lt;/h3&gt;
&lt;h3&gt;Binary literals and Digit separators&lt;/h3&gt;
&lt;p&gt;Bu &amp;ouml;zelliğin aslında 6.0 ile geleceği s&amp;ouml;yleniyordu ancak galiba yetiştiremediler ki 7.0 ile geliyor. Bu &amp;ouml;zellikle birlikte artık numeric tanımlamaları binary olarak yazabileceğiz.&amp;nbsp;&lt;/p&gt;
&lt;pre class="brush: c-sharp; first-line: 1; tab-size: 4; toolbar: false; "&gt;	public void BinaryLiterals()
	{
		var numbers = new[] { 0b0, 0b1, 0b10 };
		foreach (var number in numbers)
		{
		  Console.WriteLine(number);
		}
	}&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;img src="/image.axd?picture=%2f2016%2f06%2fc_7_0_binary-literals_.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Daha b&amp;uuml;y&amp;uuml;k sayıları daha kolay okuyabilmek i&amp;ccedil;in ise "_" ayıracını kullanarak digitleri gruplayabiliriz ve bu decimal, hexa veya binary'ler i&amp;ccedil;inde ge&amp;ccedil;erlidir.&amp;nbsp;&lt;/p&gt;
&lt;pre class="brush: c-sharp; first-line: 1; tab-size: 4; toolbar: false; "&gt;int oneBillion = 1_000_000_000;
int num_1 = 0x7FFF_1234;
int num_2 = 0b1001_0110_1010_0101;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;Pattern matching&lt;/h3&gt;
&lt;p&gt;Pattern matching &amp;ouml;zelliği fonkysionel programlama dillerinde &amp;ccedil;ok yaygın bir &amp;ouml;zellik ve C# 7.0 da "&lt;strong&gt;is&lt;/strong&gt;" operat&amp;ouml;r&amp;uuml; ile bazı &amp;ouml;zellikleri bize sunuyor ancak final s&amp;uuml;r&amp;uuml;m&amp;uuml; ile birlikte daha fazla &amp;ouml;zellik ekleneceği s&amp;ouml;yleniyor.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1) Type Pattern&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Type pattern reference typle'ların runtime type test işlemi yaparken işimize yarayacak olan bir &amp;ouml;zellik.&lt;/p&gt;
&lt;pre class="brush: c-sharp; first-line: 1; tab-size: 4; toolbar: false; "&gt;public void Foo(object item)
{
    if (item is string s)
    {
        WriteLine(s.Length);
    }
}&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2)&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;Constant Pattern&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Constant pattern bir ifadenin runtime değerini test etmek i&amp;ccedil;in kullanılır.&lt;/p&gt;
&lt;pre class="brush: c-sharp; first-line: 1; tab-size: 4; toolbar: false; "&gt;public void Foo(object item)
{
    switch (item)
    {
        case 10:
            WriteLine("It's ten");
            break;
        default:
            WriteLine("It's something else");
            break;
    }
}&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3)&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;Var Pattern&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="brush: c-sharp; first-line: 1; tab-size: 4; toolbar: false; "&gt;public void Foo(object item)
 {
     if(item is var x)
     {
         WriteLine(item == x); // prints true
     }
 }&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4)&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;Wildcard&amp;nbsp;Pattern&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="brush: c-sharp; first-line: 1; tab-size: 4; toolbar: false; "&gt;public void Foo(object item)
 {
     if(item is *)
     {
         WriteLine("Hi there"); //will be executed
     }
 }&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;5)&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;Recursive&amp;nbsp;Pattern&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="brush: c-sharp; first-line: 1; tab-size: 4; toolbar: false; "&gt;public int Sum(LinkedListNode&amp;lt;int&amp;gt; root)
{
    switch (root)
    {
        case null: return 0;
        case LinkedListNode&amp;lt;int&amp;gt; { Value is var head, Next is var tail }:
            return head + Sum(tail);
        case *: return 0;
    }
}&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;Ref returns and locals&lt;/h3&gt;
&lt;p&gt;C# ın ilk versiyonundan itibaren "&lt;strong&gt;ref&lt;/strong&gt;" keyword'&amp;uuml;n&amp;uuml; kullanarak metotlara pass by reference ile parametreler ge&amp;ccedil;ebiliyoruz. Bu &amp;ouml;zellikle birlikte metottan pass by reference ile değer d&amp;ouml;nmesini sağlıyor.&lt;/p&gt;
&lt;pre class="brush: c-sharp; first-line: 1; tab-size: 4; toolbar: false; "&gt;static void Main()
 {
     var arr = new[] { 1, 2, 3, 4 };

     ref int item = ref Get(arr, 1);

     Console.WriteLine(item); //2

     item = 10;

     Console.WriteLine(arr[1]); //10

     Console.ReadLine();
 }

ref int Get(int[] array, int index)
{
   return ref array[index]; 
}&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Kısaca C# 7.0 ile gelecek olan feature'lara değindik ancak relase olması i&amp;ccedil;in hen&amp;uuml;z &amp;ccedil;ok erken ve ilerleyen s&amp;uuml;r&amp;uuml;mlerde &amp;uuml;stte belirttiğimiz &amp;ouml;zelliklerinin bazıları değişebilir de. 7.0 ile ilgili yeni duyumlar geldik&amp;ccedil;e de yazmaya devam...&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2016-06-18 13:52:00</pubDate>
  <lastModified>2020-01-20 08:22:23</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>C-7-Yenilikleri</slug>
  <tags>
    <tag>C# 7.0</tag>
    <tag>Csharp7</tag>
    <tag>features</tag>
    <tag>C# 7.0 yenilikleri</tag>
  </tags>
  <comments />
  <categories>
    <category>8b1fab7b-05eb-4666-b030-503ffa84eea9</category>
  </categories>
  <notifications />
</post>