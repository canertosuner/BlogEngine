<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>caner</author>
  <title>Debezium Kullanarak PostgreSql Db Change Data Capture (CDC) Nasıl Yapılır ?</title>
  <description>Debezium open source olarak geliştirilen distributed bir change data capture (CDC) platformudur. Database'de track edilen verilerin Kafka Connect Apı kullanılarak Kafka'da tanımlı topic'e aktarılmasını sağlar.</description>
  <content>&lt;p style="text-align: left;"&gt;G&amp;uuml;n&amp;uuml;m&amp;uuml;z yazılım d&amp;uuml;nyasında her t&amp;uuml;rl&amp;uuml; verinin ne kadar &amp;ouml;nemli olduğunu hepimiz biliyoruzdur. &amp;Ouml;zellikle doğrudan end-user oriented &amp;ccedil;alışan sistemlerde s&amp;uuml;rekli olarak farklı noktalara veri akışı sağlandığını g&amp;ouml;r&amp;uuml;r&amp;uuml;z. &amp;Ouml;rneğin bir e-ticaret sitesinde payment işlemi yapıldığında aynı anda 3-4 farklı noktaya bu işlem ile ilgili verileri aktarmanız gerekiyor (fraud-erp-dataScience-customer etc.)&amp;nbsp;ve bunu klasik &amp;ccedil;&amp;ouml;z&amp;uuml;m olarak gece &amp;ccedil;alışan bir job ile vs değilde anlık 1-2 sn i&amp;ccedil;erisinde&amp;nbsp;iletmeniz gerekmekte. Biraz daha teknik olarak a&amp;ccedil;ıklamak gerekirse; payment db'nizde bulunan transaction tablonuzdaki b&amp;uuml;t&amp;uuml;n crud(create,read,update,delete) işlemlerinden haberdar olması gereken farklı ekipler var ve bunu bir şekilde &amp;ccedil;&amp;ouml;zmeniz beklenmekte. Eğer event-driven bir&amp;nbsp;mimariniz&amp;nbsp;var ise ilgili ekiplerin rmq'larına federation kurarak event'ler fırlatabilirsiniz ancak kod tarafında geliştirme yapmanız gereken bir &amp;ccedil;&amp;ouml;z&amp;uuml;m ve şu an bunu istemiyoruz.&lt;/p&gt;
&lt;p&gt;Bu t&amp;uuml;r problemlere &amp;ccedil;&amp;ouml;z&amp;uuml;m olarak &amp;ouml;nerilen y&amp;ouml;ntemleri araştırdığımızda karşımıza bunlardan biri olan &lt;a href="https://en.wikipedia.org/wiki/Change_data_capture"&gt;Change Data Capture&lt;/a&gt;(CDC) yaklaşımı &amp;ccedil;ıkmakta. CDC db seviyesinde data-tracking yaparak &amp;ccedil;&amp;ouml;z&amp;uuml;mler &amp;uuml;reten bir dizi design pattern modelidir.&lt;/p&gt;
&lt;p&gt;Bu yazımızda PostgreSql veritabınında bulunan bir tabloyu&amp;nbsp;&lt;a href="https://github.com/debezium/debezium"&gt;Debezium&lt;/a&gt;&amp;nbsp;ile track ederek b&amp;uuml;t&amp;uuml;n crud işlemlerini Kafka'ya birer message olarak publish&amp;nbsp;edip sonrasında bir consumer ile bu message'ları consume&amp;nbsp;eden bir yapı tasarlayacağız.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;.&amp;nbsp;&lt;a href="https://kafka.apache.org/"&gt;Apache Kafka&lt;/a&gt;&amp;nbsp;- Messaging topic&amp;nbsp;oluşturarak database'de&amp;nbsp;track edilecek kayıtları store etmek i&amp;ccedil;in kullanacağız.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;.&amp;nbsp;&lt;a href="https://www.confluent.io/hub/"&gt;Kafka Connect&lt;/a&gt;&amp;nbsp;-&amp;nbsp;Apache Kafka ve diğer sistemler arasında &amp;ouml;l&amp;ccedil;eklenebilir ve g&amp;uuml;venilir veri akışını sağlamak i&amp;ccedil;in kullanılan bir tool'dur. Veritabanlarındaki&amp;nbsp;kayıtları Kafka'ya ve&amp;nbsp;kafka dışındaki başka bir source'a&amp;nbsp;taşıyabilen connector'leri tanımlamak i&amp;ccedil;in kullanılır.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;.&amp;nbsp;&lt;a href="https://debezium.io/"&gt;Debezium&lt;/a&gt;&amp;nbsp;- Debezium&amp;nbsp;open source olarak geliştirilen distributed bir change data capture (CDC) platformudur. Database'de track edilen&amp;nbsp;verilerin Kafka Connect Apı kullanılarak Kafka'da tanımlı topic'e aktarılmasını sağlar.&lt;/p&gt;
&lt;p style="text-align: center;"&gt;&lt;img src="/image.axd?picture=/2020/dbzum_imgs_1.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Uygulamamızı geliştirmeye başlayalım. &amp;Ouml;ncelikle hazırlamış olduğumuz&amp;nbsp;&lt;strong&gt;&lt;span style="text-decoration: underline;"&gt;docker-compose.yml&lt;/span&gt;&lt;/strong&gt;&amp;nbsp;dosyamız ile zookeeper, kafka, postgresql ve connector i&amp;ccedil;in gerekli image'leri &amp;ccedil;ekip docker'da &amp;ccedil;alışır hale getirelim.&lt;/p&gt;
&lt;pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"&gt;version: '3.1'
services:
    postgres:
        image: debezium/postgres
        environment:
          POSTGRES_PASSWORD: qwerty
          POSTGRES_USER: appuser
        volumes:
           - ./postgres:/data/postgres
        ports:
          - 6532:6532 
    zookeeper:
        image: confluentinc/cp-zookeeper
        ports:
          - "2181:2181"
        environment:
          ZOOKEEPER_CLIENT_PORT: 2181
    kafka:
        image: confluentinc/cp-kafka
        depends_on:
          - zookeeper
          - postgres
        ports:
          - "9092:9092"
        environment:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_LOG_CLEANER_DELETE_RETENTION_MS: 5000
          KAFKA_BROKER_ID: 1
          KAFKA_MIN_INSYNC_REPLICAS: 1
    connector:
        image: debezium/connect:latest
        ports:
          - "8083:8083"
        environment:
          GROUP_ID: 1
          CONFIG_STORAGE_TOPIC: my_connect_configs
          OFFSET_STORAGE_TOPIC: my_connect_offsets
          BOOTSTRAP_SERVERS: kafka:9092
        depends_on:
          - zookeeper
          - postgres
          - kafka&lt;/pre&gt;
&lt;p&gt;Dosyayı oluşturduktan sonra ilgili dizinde;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker-compose up&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;komutunu &amp;ccedil;alıştırarak kurulumlara başlayalım.&amp;nbsp;&lt;img src="/image.axd?picture=/2020/dcks_dbzm_img2.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;B&amp;uuml;t&amp;uuml;n kurulumlar bittikten sonra farklı bir terminalde docker ps komutu ile aşağıdaki gibi container'larımızın ayağa kalktığını g&amp;ouml;rebilmemiz gerekmekte.&lt;/p&gt;
&lt;p style="text-align: center;"&gt;&lt;img src="/image.axd?picture=/2020/Screenshot from 2020-03-11 14-57-58.png" alt="" /&gt;&lt;/p&gt;
&lt;h3&gt;PostgreSql&amp;nbsp;&amp;nbsp;&lt;/h3&gt;
&lt;p&gt;İlk olarak postgres container'a girip appuser adında bir user tanımlayıp sonrasında Payment database'ini oluşturup Transaction tablomuzu yaratalım.&amp;nbsp;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker exec -it df3f1b598557 bash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;psql -h localhost -p 5432 -U appuser&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;CREATE DATABASE payment;&lt;br /&gt;\c payment&lt;br /&gt;CREATE TABLE transaction(id SERIAL PRIMARY KEY, amount int, customerId varchar(36));&lt;/p&gt;
&lt;p&gt;insert into transaction(id, amount,customerId) values(51, 12,'37b920fd-ecdd-7172-693a-d7be6db9792c');&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B&amp;uuml;t&amp;uuml;n komutlarımızı başarılı bir şekilde &amp;ccedil;alıştırdığımızda appuser kullanıcısı ile login olup payment adında bir database ve transaction adında bir tablo yaratmış olduk. &amp;Ouml;rnek olarak bir tanede transaction insert ettik.&lt;/p&gt;
&lt;p style="text-align: center;"&gt;&lt;img src="/image.axd?picture=/2020/dckr_dbzm_db_sctptr.png" alt="" /&gt;&lt;/p&gt;
&lt;h3&gt;Debezium&amp;nbsp;&lt;/h3&gt;
&lt;p&gt;Şimdi transaction tablosunda ger&amp;ccedil;ekleşen her değişikliği Kafka'ya taşımak istiyoruz ve bunun i&amp;ccedil;in bir connector oluşturmalıyız. Connector, verileri veritabanından (veya başka bir depolama sisteminden) Kafka cluster'a (yada tam tersi) taşımaktan sorumlu olan bir uygulamadır. Kafka conenctor'e aşina değilseniz&amp;nbsp;&lt;a href="https://www.confluent.io/connectors/"&gt;buradan&amp;nbsp;&lt;/a&gt;daha fazla bilgiye ulaşabilirsiniz. Burada PostgreSql CRUD&amp;nbsp;işlemlerini&amp;nbsp;Apache Kafka cluster'ına taşımak istiyoruz.&lt;/p&gt;
&lt;p&gt;Debezium &amp;ouml;zetle, PostgreSql'den gelen t&amp;uuml;m change-event'lerini&amp;nbsp;okuyabilen ve bunları Kafka'da yayınlayabilen bir Kafka connector'&amp;uuml;d&amp;uuml;r.&lt;/p&gt;
&lt;p&gt;Debezium'un restApi'si bulunmakta ve bu api'yi kullanarak&amp;nbsp;gerekli tanımlamalarımızı aşağıdaki gibi yapalım.&lt;/p&gt;
&lt;pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"&gt;curl -X POST -H "Accept:application/json" -H "Content-Type:application/json" localhost:8083/connectors/ -d '
{
 "name": "payment-connector",
 "config": {
 "connector.class": "io.debezium.connector.postgresql.PostgresConnector",
 "tasks.max": "1",
 "database.hostname": "postgres",
 "database.port": "5432",
 "database.user": "appuser",
 "database.password": "qwerty",
 "database.dbname" : "payment",
 "database.server.name": "dbserver1",
 "database.whitelist": "payment",
 "database.history.kafka.bootstrap.servers": "kafka:9092",
 "database.history.kafka.topic": "schema-changes.payment"
 }
}'&lt;/pre&gt;
&lt;p&gt;Connector'&amp;uuml;m&amp;uuml;z&amp;uuml; tanımladık ve db bilgilerini vererek hangi schema ve database'e ait event'leri track edeceğini belirttik. Eğer&amp;nbsp;&lt;strong&gt;curl localhost:8083/connectors/payment-connector/status&amp;nbsp;&lt;/strong&gt;komutunu &amp;ccedil;alıştırırsanız connector'&amp;uuml;n RUNNING state'de olduğunu g&amp;ouml;rebilirsiniz.&lt;/p&gt;
&lt;p&gt;&lt;img src="/image.axd?picture=/2020/Screenshot from 2020-03-11 15-08-32.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Şimdi ise kafka container'ın i&amp;ccedil;erisine gidip topiclerimizi listeleyelim.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker exec -it b06d7ea41b03 bash&lt;/p&gt;
&lt;p&gt;kafka-topics --zookeeper zookeeper:2181 --list&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"&gt;__confluent.support.metrics
__consumer_offsets
connect-status
dbserver1.public.transaction
my_connect_configs
my_connect_offsets&lt;/pre&gt;
&lt;p&gt;G&amp;ouml;r&amp;uuml;ld&amp;uuml;ğ&amp;uuml; &amp;uuml;zre&amp;nbsp;&lt;strong&gt;dbserver1.public.transaction&lt;/strong&gt;&amp;nbsp;topic'i oluşmuş. Transaction tablosunun b&amp;uuml;t&amp;uuml;n event'lerini connector aracılığı ile kafka'da ki bu topic'te store edilecek.&lt;/p&gt;
&lt;p&gt;Şimdi aşağıdaki komutu kullanarak bir consumer ayağa&amp;nbsp;kaldırıp topic'e gelen message'ları dinlemeye başlayalım.&lt;/p&gt;
&lt;pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"&gt;kafka-console-consumer --bootstrap-server kafka:9092 --from-beginning --topic dbserver1.public.transaction --property print.key=true --property key.separator="-"&lt;/pre&gt;
&lt;p&gt;Sonrasında farklı bir terminalde tekrardan payment db'ye connect olup transaction tablosuna bir insert ve update işlemi yapalım ve bu işlemlerin kafka-consumer tarafından consume edildiğini g&amp;ouml;relim.&lt;/p&gt;
&lt;pre class="brush:sql;auto-links:false;toolbar:false" contenteditable="false"&gt;insert into transaction(id, amount,customerId) values(85, 87,'37b920fd-ecdd-7172-693a-d7be6db9792c');
update transaction set amount=77 where id=85&lt;/pre&gt;
&lt;p&gt;&lt;img src="/image.axd?picture=/2020/Screenshot from 2020-03-11 15-52-02.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Payload'a bakacak olursak,&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;Insert işlemi i&amp;ccedil;in;&lt;/span&gt;&amp;nbsp; &amp;nbsp;"op":"c" olarak iletilir.&lt;/p&gt;
&lt;pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"&gt;{
   "payload":{
      "before":null,
      "after":{
         "id":85,
         "amount":87,
         "customerid":"37b920fd-ecdd-7172-693a-d7be6db9792c"
      },
      "source":{
         "version":"1.0.2.Final",
         "connector":"postgresql",
         "name":"dbserver1",
         "ts_ms":1583931003883,
         "snapshot":"false",
         "db":"payment",
         "schema":"public",
         "table":"transaction",
         "txId":568,
         "lsn":23936360,
         "xmin":null
      },
      "op":"c",
      "ts_ms":1583931003889
   }
}&lt;/pre&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;Update işlemi i&amp;ccedil;in;&lt;/span&gt;&amp;nbsp; &amp;nbsp;"op":"u" olarak iletilir.&lt;/p&gt;
&lt;pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"&gt;{
   "payload":{
      "before":null,
      "after":{
         "id":85,
         "amount":77,
         "customerid":"37b920fd-ecdd-7172-693a-d7be6db9792c"
      },
      "source":{
         "version":"1.0.2.Final",
         "connector":"postgresql",
         "name":"dbserver1",
         "ts_ms":1583931065480,
         "snapshot":"false",
         "db":"payment",
         "schema":"public",
         "table":"transaction",
         "txId":569,
         "lsn":23936888,
         "xmin":null
      },
      "op":"u",
      "ts_ms":1583931065486
   }
}&lt;/pre&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;Delete işlemi i&amp;ccedil;in;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;delete transaction where id=85;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"&gt;{
   "schema":{
      "type":"struct",
      "fields":[
         {
            "type":"int32",
            "optional":false,
            "field":"id"
         }
      ],
      "optional":false,
      "name":"dbserver1.public.transaction.Key"
   },
   "payload":{
      "id":85
   }
}"-null"&lt;/pre&gt;
&lt;p&gt;CRUD işlem tipine g&amp;ouml;re connector aracılığı ile kafka'da bulunan topic'e&amp;nbsp;yukarıdaki gibi message'lar iletilir.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;Ouml;zetleyecek olursak; yazinin&amp;nbsp;başındada bahsettiğim gibi bu işlemi yapabilmenin farklı teknikleri bulunmakta Debezium bunlardan sadece biri.&amp;nbsp;CDC tekniğini kullanarak veritabanı değişikliklerimizi ger&amp;ccedil;ek zamanlı olarak Kafka'ya push edebilir&amp;nbsp;ve sonrasında kafka'da blunan bu mesajları&amp;nbsp;bir consumer aracılığı ile ihtiya&amp;ccedil; duyulan noktalara g&amp;ouml;nderebiliriz. Consumer tarafinda farkli dillerde kutuphaneler kullanarak kendi business&amp;rsquo;larinizi isletebilirsiniz.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/canertosuner/postgresql-change-data-capture-using-debezium/tree/master"&gt;Source&lt;/a&gt;&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2020-03-11 16:08:00</pubDate>
  <lastModified>2020-03-25 19:03:37</lastModified>
  <raters>1</raters>
  <rating>5</rating>
  <slug>debezium-kullanarak-postgresql-db-change-data-capture-cdc-nasil-yapilir</slug>
  <tags>
    <tag>CDC</tag>
    <tag>postgresql</tag>
    <tag>debezium cdc</tag>
    <tag>Change Data Capture
</tag>
    <tag>Apache Kafka
</tag>
    <tag>Debezium</tag>
    <tag>Kafka</tag>
  </tags>
  <comments>
    <comment id="e48ef02c-edca-4896-853b-8ef2985efc10" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2020-03-14 11:33:02</date>
      <author>Kaan T</author>
      <email>kaanturnagil@gmail.com</email>
      <country />
      <ip>95.70.129.66</ip>
      <avatar />
      <content>Harika bir yazı olmuş, genelde ingilizce kaynaklar var çok faydalı oldu teşekkürler.</content>
    </comment>
    <comment id="9fb20932-51b0-4195-a9d3-85559c6ac986" parentid="e48ef02c-edca-4896-853b-8ef2985efc10" approved="True" spam="False" deleted="False">
      <date>2020-03-14 17:15:02</date>
      <author>Caner</author>
      <email>canertosuner@gmail.com</email>
      <country />
      <ip>95.70.128.215</ip>
      <moderatedby>Rule:authenticated</moderatedby>
      <content>Degerli yorumun icin tesekkurler :)</content>
    </comment>
  </comments>
  <categories>
    <category>45609306-8fde-4db1-8d81-7fe1bf2b9738</category>
    <category>2c45703a-5f98-4b5f-a533-23a91d41eb16</category>
    <category>ebe6cacc-3d21-4b1a-87de-e73b59b91a82</category>
  </categories>
  <notifications />
</post>