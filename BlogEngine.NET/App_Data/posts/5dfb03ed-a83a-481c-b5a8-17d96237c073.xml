<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>caner</author>
  <title>Quartz.Net Nedir, Nasıl Kullanılır ?</title>
  <description>http://www.mikesdotnetting.com/article/254/scheduled-tasks-in-asp-net-with-quartz-net</description>
  <content>&lt;p&gt;Quartz.Net,&amp;nbsp;geliştirdiğiniz web tabanlı&amp;nbsp;projelerde&amp;nbsp;&lt;strong&gt;scheduled task&lt;/strong&gt; yani zamana dayalı planlı g&amp;ouml;revler &amp;ccedil;alıştırmak istediğinizde &amp;ccedil;ok kolay bir şekilde implement edip kullanabileceğiniz open source bir k&amp;uuml;t&amp;uuml;phanedir. Aslında bir &amp;ccedil;ok kişi bu tarz işlemleri yapmak i&amp;ccedil;in bir console uygulaması geliştirir ve windows server'da task schedular'a bu uygulamayı ne zaman &amp;ccedil;alıştıracağını s&amp;ouml;yler ve iş biter. Ancak gerek sunucuya erişimin kısıtlı olduğu durumlarda, gerekse ikinci bir uygulama geliştirmenin yol a&amp;ccedil;tığı efor d&amp;uuml;ş&amp;uuml;nd&amp;uuml;ğ&amp;uuml;nde quartz.net daha avantajlı gibi g&amp;ouml;r&amp;uuml;n&amp;uuml;yor.&lt;/p&gt;
&lt;p&gt;Kullanım olarak iki aşamadan oluşuyor diyebiliriz,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;Ccedil;alışacak olan Job'ı belirleme,&lt;/li&gt;
&lt;li&gt;Hangi zaman aralıklarında &amp;ccedil;alışacağı bilgisi set edilir.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Quartz 3 ana bileşenden oluşur, &lt;strong&gt;job&lt;/strong&gt;, &lt;strong&gt;trigger&lt;/strong&gt;, &lt;strong&gt;schedular&lt;/strong&gt;. &lt;strong&gt;Job&lt;/strong&gt; yapılacak olan iştir. &lt;strong&gt;Trigger &lt;/strong&gt;job'ın ne zaman, ne şekilde tetikleneceği emrini veren &amp;amp; tetikleyen yapıdır. Job ve Trigger ikisi birlikte &lt;strong&gt;schedular&lt;/strong&gt;'a register olurlar ve kısaca &amp;ccedil;alışma şekli olarak; job schedular &amp;uuml;zerinden trigger tarafından &amp;ccedil;alıştırılır diyebiliriz.&lt;/p&gt;
&lt;p&gt;&amp;Ouml;rnek bir case &amp;uuml;zerinden ilerleyelim; bir banka web service projemiz olsun ve m&amp;uuml;şterilere her g&amp;uuml;n&amp;nbsp;saat 13:30 da push notification yollayan bir kampanyalar job'ı geliştirelim.&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;1. Quartz.Net Kurulumu&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Kurulum i&amp;ccedil;in projenize&amp;nbsp;sağ tıklayıp Manage Nuget Packages dedikten sonra&amp;nbsp;aşağıdaki gibi nuget'ten projeyi install edebiliriz.&lt;/p&gt;
&lt;p&gt;&lt;img style="display: block; margin-left: auto; margin-right: auto;" src="/image.axd?picture=/2016/08/quartznet_img1.png" alt="" width="586" height="390" /&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;2. Job'ı Oluşturma&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Bunun i&amp;ccedil;in ilk olarak IJob interface'inden implement olan &lt;strong&gt;CampaignPushJob &lt;/strong&gt;adında bir class oluşturalım. IJob ile birlikte class'ımız &lt;strong&gt;Execute&lt;/strong&gt;&amp;nbsp;adında bir metoda sahip olur ve job &amp;ccedil;alışırken aslında bu metot i&amp;ccedil;erisindeki akış &amp;ccedil;alışır diyebiliriz.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;    public class CampaignPushJob : IJob
    {
        public void Execute(IJobExecutionContext context)
        {
            var userRepository = new UserRepository();
            var userList = userRepository.GetPNUserList();

            var pushText = "Size &amp;ouml;zel konut kredisi teklifleri.";

            var pnRepository = new PNRepository();
            pnRepository.SendPush(pushText, userList);
        }
    }&lt;/pre&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;3. Schedular Oluşturma&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Bu adımda &lt;strong&gt;CampaignPushJobScheduler&lt;/strong&gt; adında i&amp;ccedil;erisinde ne zaman ve neyi &amp;ccedil;alıştıracağı bilgisini verdiğimiz schedular'ımızı yazıyoruz. &lt;strong&gt;JobBuilder.Create&amp;lt;CampaignPushJob&amp;gt;().Build()&lt;/strong&gt; satırında da g&amp;ouml;r&amp;uuml;ld&amp;uuml;ğ&amp;uuml; gibi bizden bir adet &lt;strong&gt;IJob&lt;/strong&gt; interface'ini implement etmiş class&amp;nbsp;istemekte. Bizde bir &amp;uuml;stte yazdığımız &lt;strong&gt;CampaignPushJob&lt;/strong&gt;'ını buraya set ediyoruz. Ne zaman &amp;ccedil;alıştıracağı bilgisini ise TriggerBuilder'ı initialize ederken set edeceğiz. &amp;Ouml;rneğimizde her g&amp;uuml;n saat 13:30 da &amp;ccedil;alışmasını istediğimiz bir job &amp;ccedil;alıştırmak istediğimiz i&amp;ccedil;in TriggerBuilder i&amp;ccedil;erisinde aşağıdaki gibi bir tanımlama yaptık.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;    public class CampaignPushJobScheduler
    {
        public static void Start()
        {
            IScheduler scheduler = StdSchedulerFactory.GetDefaultScheduler();
            scheduler.Start();

            IJobDetail job = JobBuilder.Create&amp;lt;CampaignPushJob&amp;gt;().Build();

            ITrigger trigger = TriggerBuilder.Create()
                .WithDailyTimeIntervalSchedule
                  (s =&amp;gt;
                     s
                    .OnEveryDay() //herg&amp;uuml;n &amp;ccedil;alışacağı bilgisi
                    .StartingDailyAt(TimeOfDay.HourAndMinuteOfDay(13, 30)) //herg&amp;uuml;n hangi saatte &amp;ccedil;alışacağı bilgisi
                  )
                .Build();

            scheduler.ScheduleJob(job, trigger);
        }
    }&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4. Schedular&amp;nbsp;Start Etme&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Bu adıma kadar job, schedular ve trigger bilgilerimizi oluşturduk ve artık uygulama ayağa kalktıktan sonra schedular'ı start etmemiz gerekiyor. Geliştirmekte olduğumuz proje bir Asp.Net projesi olduğundan bu işlemi kolayca &lt;strong&gt;Global.asax&lt;/strong&gt; dosyası i&amp;ccedil;erisinde bulunan Application_Start metodunda yapabiliriz. Tek yapmamız gereken&amp;nbsp;&lt;strong&gt;CampaignPushJobScheduler&lt;/strong&gt;'ın i&amp;ccedil;erisinde bulunan &lt;strong&gt;Start&lt;/strong&gt; metodunu &amp;ccedil;ağırmak.&lt;/p&gt;
&lt;pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"&gt;    public class Global : HttpApplication
    {
        void Application_Start(object sender, EventArgs e)
        {
            CampaignPushJobScheduler.Start();
        }
    }&lt;/pre&gt;
&lt;p&gt;Quartz.Net implement etme işlemimiz bu kadar. Artık web projemiz bir kere ayağa kalktıktan sonra set ettiğimiz değerler doğrultusunda &amp;ccedil;alışacaktır.&lt;/p&gt;
&lt;p&gt;Quartz schedular işlemler i&amp;ccedil;in .Net tarafında kullanılabilecek en yaygın k&amp;uuml;t&amp;uuml;phanelerden bir tanesidir. &amp;Ouml;rnekte her ne kadar az kullanmış olsak da trigger time &amp;ouml;zelliğiyle ilgili kullanıcılara bir &amp;ccedil;ok se&amp;ccedil;enek sunmakta. Bunlarla ilgili ayrıntılı bilgiyi &lt;a href="http://www.quartz-scheduler.net/documentation/quartz-3.x/tutorial/index.html"&gt;bu linkte&lt;/a&gt; bulabilirsiniz.&lt;/p&gt;</content>
  <ispublished>False</ispublished>
  <isdeleted>True</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2016-10-03 21:50:00</pubDate>
  <lastModified>2016-10-04 11:39:39</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>quartz-net-nedir-nasil-kullanilir</slug>
  <tags>
    <tag>quartz</tag>
    <tag>quartz.net</tag>
    <tag>schedular</tag>
    <tag>task</tag>
    <tag>job</tag>
    <tag>ijob</tag>
    <tag>itrigger</tag>
    <tag>schedular task</tag>
  </tags>
  <comments />
  <categories>
    <category>91467d82-b6b4-4b4d-ab9a-f3a25c7c7447</category>
    <category>8b1fab7b-05eb-4666-b030-503ffa84eea9</category>
    <category>ebe6cacc-3d21-4b1a-87de-e73b59b91a82</category>
    <category>27e5276b-0227-42f3-a037-9d3992022f96</category>
    <category>59c799ee-35b7-40dc-911f-1d8613b862f2</category>
    <category>4f7b9b49-03e3-42bc-ba3b-203e3ca707ec</category>
  </categories>
  <notifications />
</post>