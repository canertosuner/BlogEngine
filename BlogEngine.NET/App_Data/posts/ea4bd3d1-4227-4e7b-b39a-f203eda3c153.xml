<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>caner</author>
  <title>INotifyPropertyChanged Nedir Nasıl Kullanılır</title>
  <description>WPF, Windows10 (Mobile,Desktop etc.) uygulama geliştirme ile uğraşan arkadaşlar bilirler ki arayüz tarafında XAML (Extensible Application Markup Language) kullanılır ve codebehind'dan yani C# tarafından uygulama ekranında bulunan herhangi bir UI</description>
  <content>&lt;p&gt;WPF, Windows10 (Mobile,Desktop etc.) uygulama geliştirme ile uğraşan arkadaşlar bilirler ki aray&amp;uuml;z tarafında XAML (Extensible Application Markup Language) kullanılır ve codebehind'dan yani C# tarafından uygulama ekranında bulunan herhangi bir UI Control'&amp;uuml;n&amp;uuml;n değeri değiştirme işlemlerini sık sık yaparız. İşte bu gibi işlemleri &amp;ouml;rneğin TextBlock'un Text'ini değiştirme işlemini C# tarafında &lt;strong&gt;tblName.Text="Caner";&amp;nbsp;&lt;/strong&gt;yazmak yerine&amp;nbsp;&lt;strong&gt;INotifyPropertyChanged&lt;/strong&gt; interface'ini kullanarak bu gibi işlemleri kolaylıkla ve daha y&amp;ouml;netilebilir bir şekilde yapabiliriz. (Tabi sadece TextBlock i&amp;ccedil;in ge&amp;ccedil;erli değil, Button'un click event'i gibi durumlarda da INotifyPropertyChanged'İ kullanabiliriz)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;INotifyPropertyChanged&lt;/strong&gt; nedir dersek kısaca ş&amp;ouml;yle tanımlayabiliriz ;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;"C# tarafında yani CodeBehind da tanımlı olan bir class'ın property'sinin değeri değiştiğinde bu değişimden UI'ı yani XAML tarafını bilgilendirmesi" &lt;/em&gt;demektir&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img style="float: right;" src="http://canertosuner.com/MyImage_Folder/inotifypropertychangedimg_1.png" alt="" width="147" height="262" /&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Ş&amp;ouml;yle bir &amp;ouml;rneğimiz olsun; bir adet Windows Phone uygulaması ve ekranda 2 tane TextBox, 1 tane Button ve 1 tane de Label olsun. Kullanıcı bu 2 TextBox'a birer sayı girecek ve Button'a tıkladığında hemen altında bulunan Label'da bu iki sayının toplamını yazacak.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HesaplaViewModel.cs class&lt;/strong&gt;'ı&lt;/p&gt;
&lt;p&gt;MVVM pattern ile daha &amp;ouml;nce uğraşan arkadaşlar bilirler hiyerarşi Model, View, ViewModel diye ayrılır. Bizim uygulamamızda şuan Model yok ancak MainPage.xaml View'i ve hemen aşağıda bulunan ViewModel class'ımız var. Bu class View'imizin DataContext'i olacak ve UI tarafı ile b&amp;uuml;t&amp;uuml;n haberleşme bu class &amp;uuml;zerinden ger&amp;ccedil;ekleşecektir. ViewModel i&amp;ccedil;erisinde tanımlı olan parametreleri UI'a DataContext &amp;uuml;zerinden Binding işlemleri yapıp propertChanged anından UI thread'den durumu haberdar edip Bind olduğu UI Control' deki değerini update edecektir veya bir event ise o event'in davranışına g&amp;ouml;re &amp;ccedil;alışacaktır. &amp;nbsp;&lt;/p&gt;
&lt;pre class="brush: c-sharp; first-line: 1; tab-size: 4; "&gt;  public class HesaplaViewModel : INotifyPropertyChanged
    {
        private ICommand _HesaplaCommand;
        private int _ilkSayi;
        private int _ikinciSayi;
        private int _sonuc;

        public HesaplaViewModel()
        {
            HesaplaCommand = new RelayCommand(Sum);
        }

        public int İlkSayi
        {
            get { return _ilkSayi; }
            set
            {
                _ilkSayi = value;
                OnPropertyChanged("İlkSayi");
            }
        }

        public int İkinciSayi
        {
            get { return _ikinciSayi; }
            set
            {
                _ikinciSayi = value;
                OnPropertyChanged("İkinciSayi");
            }
        }

        public int Sonuc
        {
            get { return _sonuc; }
            set
            {
                _sonuc = value;
                OnPropertyChanged("Sonuc");
            }
        }

        public ICommand HesaplaCommand
        {
            get { return _HesaplaCommand; }
            private set
            {
                _HesaplaCommand = value;
                OnPropertyChanged("HesaplaCommand");
            }
        }

        private void Sum(object obj)
        {
            Sonuc = İlkSayi + İkinciSayi;
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RelayCommand.cs class&lt;/strong&gt;'ı&lt;/p&gt;
&lt;p&gt;RelayCommand button'a tıklandığında &amp;ccedil;alışacak olan event gibi d&amp;uuml;ş&amp;uuml;nebiliriz, Butonun click statelerini aşağıda ki metodlar sayesinde handle edip y&amp;ouml;netimini sağlıyoruz&lt;/p&gt;
&lt;pre class="brush: c-sharp; first-line: 1; tab-size: 4; toolbar: false; "&gt;    public class RelayCommand : ICommand
    {
        private Action&amp;lt;object&amp;gt; _action;
        public RelayCommand(Action&amp;lt;object&amp;gt; action)
        {
            _action = action;
        }
        public bool CanExecute(object parameter)
        {
            return true;
        }
        public event EventHandler CanExecuteChanged;
        public void Execute(object parameter)
        {
            _action(parameter);
        }
    }&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;App.xaml&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Burda HesaplaViewModel'ini Resource olarak tanımlama işlemini yapıyoruz.&lt;/p&gt;
&lt;pre class="brush: xml; first-line: 1; tab-size: 4; toolbar: false; "&gt;&amp;lt;Application
    x:Class="App1.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:App1"&amp;gt;
    &amp;lt;Application.Resources&amp;gt;
        &amp;lt;local:HesaplaViewModel x:Key="HesaplaViewModel" /&amp;gt;
    &amp;lt;/Application.Resources&amp;gt;
&amp;lt;/Application&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MainPage.xaml View'ı&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;App.xaml de tanımlaış olduğumuz Resource'u &lt;strong&gt;DataContext = "{StaticResource HesaplaViewModel}"&amp;nbsp;&lt;/strong&gt;olarak View'imize verip Binding işlemlerini yapacağız.&lt;/p&gt;
&lt;pre class="brush: xml; first-line: 1; tab-size: 4; toolbar: false; "&gt;&amp;lt;Page
    x:Class="App1.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:App1"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    Background="{ThemeResource ApplicationPageBackgroundThemeBrush}"
    DataContext="{StaticResource HesaplaViewModel}"&amp;gt;

    &amp;lt;Grid&amp;gt;
        &amp;lt;Grid HorizontalAlignment="Center" VerticalAlignment="Center"&amp;gt;
            &amp;lt;Grid.RowDefinitions&amp;gt;
                &amp;lt;RowDefinition Height="auto"/&amp;gt;
                &amp;lt;RowDefinition Height="auto"/&amp;gt;
                &amp;lt;RowDefinition Height="auto"/&amp;gt;
                &amp;lt;RowDefinition Height="auto"/&amp;gt;
            &amp;lt;/Grid.RowDefinitions&amp;gt;
            &amp;lt;TextBox Grid.Row="0" Text="{Binding İlkSayi,Mode=TwoWay}" PlaceholderText="İlk Sayı" Width="200" HorizontalAlignment="Left"/&amp;gt;
            &amp;lt;TextBox Grid.Row="1" Text="{Binding İkinciSayi,Mode=TwoWay}" PlaceholderText="İkinci Sayı" Width="200" HorizontalAlignment="Left"/&amp;gt;
            &amp;lt;Button Grid.Row="2" Content="Hesapla" Width="200" Command="{Binding HesaplaCommand}" /&amp;gt;
            &amp;lt;StackPanel Orientation="Horizontal" Grid.Row="3"&amp;gt;
                &amp;lt;TextBlock Text="Sonu&amp;ccedil; : " FontSize="20"/&amp;gt;
                &amp;lt;TextBlock Text="{Binding Sonuc,Mode=TwoWay}" FontSize="20"/&amp;gt;
            &amp;lt;/StackPanel&amp;gt;
        &amp;lt;/Grid&amp;gt;
    &amp;lt;/Grid&amp;gt;
&amp;lt;/Page&amp;gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OnPropertyChanged()&amp;nbsp;&lt;/strong&gt;metoduna parametre olarak string bir değer almakta. Bu değer propertychanged anında hangi değerin değiştiğini anlamak i&amp;ccedil;in bir nevi ID ye benzer bir string değer veriyoruz ve ilgili property'nin değerinin update olma anında hangi property ise bu string parametrelere bakrak anlayabiliriz. Ama bu parametreyi vermek zorunda da değiliz eğer&amp;nbsp;&lt;strong&gt;OnPropertyChanged()&amp;nbsp;&lt;/strong&gt;metodunu bu şekilde kullanırsak da otomatik olarak proeprty'nin ismini alacaktır.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Sonu&amp;ccedil; olarak ise hesapla butonuna tıklandığında &amp;ccedil;ıktı şu şekilde olacaktır.&lt;/p&gt;
&lt;p&gt;&lt;img style="float: left;" src="http://canertosuner.com/MyImage_Folder/inotifypropertychangedimg_2.png" alt="" width="169" height="301" /&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;G&amp;ouml;r&amp;uuml;ld&amp;uuml;ğ&amp;uuml; &amp;uuml;zre yazımızın başında bahsettiğimiz gibi code behind da&amp;nbsp;&lt;strong&gt;tblName.Text="Caner"; &amp;nbsp;&lt;/strong&gt;gibi bir işlem yapmayıp bunu yerine&amp;nbsp;INotifyPropertyChanged interface'inden faydalanıp işlemlerimizi &amp;ouml;yle yaptık. Bu bize ne katar dersek, b&amp;uuml;y&amp;uuml;k &amp;ccedil;aplı projelerde genellikle MVVM pattern'i kullanılır ve&amp;nbsp;INotifyPropertyChanged de bu pattern'in ayrılmaz bir par&amp;ccedil;asıdır. Bu şekilde yazdığımız kod hem daha "kaliteli"(tırnak i&amp;ccedil;inde) hemde daha y&amp;ouml;netilebilir oldu. Yarın bir g&amp;uuml;n dendi ki aynı işlevi yapan bir WPF app geliştirelim. Bu gibi bir durum i&amp;ccedil;in yazmış olduğumuz&amp;nbsp;HesaplaViewModel'ini aynen olduğu gibi tek bir satır bile değiştirmeden referans olarak verilen ilgili proje i&amp;ccedil;inde kullanabilir ve b&amp;ouml;ylece &amp;ccedil;ok b&amp;uuml;y&amp;uuml;k bir yazılım maliyetinden de kurtulmuş oluruz.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2015-12-14 14:58:00</pubDate>
  <lastModified>2020-01-20 08:22:27</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>INotifyPropertyChanged-nedir-nasil-kullanilir</slug>
  <tags>
    <tag>inotifypropertychanged</tag>
    <tag>ICommand</tag>
    <tag>RelayCommand</tag>
    <tag>DataContext</tag>
    <tag>ViewModel</tag>
    <tag>Binding</tag>
    <tag>wpf</tag>
  </tags>
  <comments>
    <comment id="ab4ff4c4-fb45-4166-8139-d059560007ab" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2017-02-02 16:33:05</date>
      <author>Caner Tosuner</author>
      <email>trackback</email>
      <country />
      <ip>191.235.217.28:9480</ip>
      <website>http://www.canertosuner.com/post/XAML-Binding-Mode-OneWay-TwoWay</website>
      <content>XAML Binding Mode OneWay, TwoWay

XAML Binding Mode OneWay, TwoWay</content>
    </comment>
    <comment id="66e959c3-ab7f-442e-b199-f0c9244e06c5" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2020-01-15 06:39:37</date>
      <author>Caner Tosuner</author>
      <email>trackback</email>
      <country />
      <ip>94.73.147.115</ip>
      <website>http://canertosuner.com/post/XAML-Binding-Mode-OneWay-TwoWay</website>
      <moderatedby>Rule:white list</moderatedby>
      <content>XAML Binding Mode OneWay, TwoWay

XAML Binding Mode OneWay, TwoWay</content>
    </comment>
  </comments>
  <categories>
    <category>e8efc70d-b037-4f0c-9301-07808692337b</category>
  </categories>
  <notifications />
</post>